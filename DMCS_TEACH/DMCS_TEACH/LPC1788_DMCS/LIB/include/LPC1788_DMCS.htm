<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\LPC1788_DMCS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\LPC1788_DMCS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Apr 12 08:50:42 2018
<BR><P>
<H3>Maximum Stack Usage =       3308 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; SDUpgradeStm32 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[58]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[25]">BOD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3c]">Bit_Read</a> from main.o(i.Bit_Read) referenced from main.o(i.InitModBus)
 <LI><a href="#[3d]">Bit_Write</a> from main.o(i.Bit_Write) referenced from main.o(i.InitModBus)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[30]">CANActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[27]">CAN_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[28]">DMA_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[36]">EEPROM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[20]">EINT0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[21]">EINT1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[22]">EINT2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[23]">EINT3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2a]">ENET_IRQHandler</a> from lpc177x_8x_emac.o(i.ENET_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[44]">FUN</a> from main.o(i.FUN) referenced from main.o(i.main)
 <LI><a href="#[34]">GPIO_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[29]">I2S_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[45]">IRQHandle</a> from main.o(i.IRQHandle) referenced from main.o(i.main)
 <LI><a href="#[33]">LCD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2b]">MCI_IRQHandler</a> from lpc177x_8x_mci.o(i.MCI_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2c]">MCPWM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3e]">PHY_Init</a> from phylan.o(i.PHY_Init) referenced from i_enet.o(i.Init_EMAC)
 <LI><a href="#[3f]">PHY_Reset</a> from phylan.o(i.PHY_Reset) referenced from i_enet.o(i.Init_EMAC)
 <LI><a href="#[1e]">PLL0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2e]">PLL1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[35]">PWM0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[17]">PWM1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2d]">QEI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3a]">Reg_Read</a> from main.o(i.Reg_Read) referenced from main.o(i.InitModBus)
 <LI><a href="#[3b]">Reg_Write</a> from main.o(i.Reg_Write) referenced from main.o(i.InitModBus)
 <LI><a href="#[4]">Reset_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1b]">SPIFI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1c]">SSP0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1d]">SSP1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[32]">SSP2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from i_systick.o(i.SysTick_Handler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from i_timer.o(i.TIMER2_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[12]">TIMER3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[13]">UART0_IRQHandler</a> from i_uart.o(i.UART0_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[14]">UART1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[15]">UART2_IRQHandler</a> from i_uart.o(i.UART2_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[16]">UART3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[31]">UART4_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2f]">USBActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from lpc177x_8x_usbhost.o(i.USB_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[e]">WDT_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[46]">__main</a> from __main.o(!!!main) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[41]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[38]">ethernet_input</a> from etharp.o(i.ethernet_input) referenced from i_lwip.o(i.I_LWIP_Init)
 <LI><a href="#[39]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from i_lwip.o(i.I_LWIP_Init)
 <LI><a href="#[43]">ipfrag_free_pbuf_custom</a> from ip_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip_frag.o(i.ip_frag)
 <LI><a href="#[42]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[40]">udp_server_rev</a> from i_udp.o(i.udp_server_rev) referenced from i_udp.o(i.Init_UDP_Server)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[46]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[47]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[49]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a2]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a3]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[52]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1b9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1ba]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1bb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1bc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1bd]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1be]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[48]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1bf]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1c0]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 3308 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; SDUpgradeStm32 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1c1]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[59]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[51]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[53]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[1c3]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_write
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_read
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_server_rev
</UL>

<P><STRONG><a name="[55]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1c4]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1c5]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1cf]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[50]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[54]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1d0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>AddMsgByte</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, motion.o(i.AddMsgByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[3c]"></a>Bit_Read</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Bit_Read))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.InitModBus)
</UL>
<P><STRONG><a name="[3d]"></a>Bit_Write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Bit_Write))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.InitModBus)
</UL>
<P><STRONG><a name="[5c]"></a>BufStop</STRONG> (Thumb, 38 bytes, Stack size 88 bytes, motion.o(i.BufStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BufStop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(i.CLKPWR_ConfigPPWR))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_PwrOn
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[69]"></a>CLKPWR_GetCLK</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(i.CLKPWR_GetCLK))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_PwrOn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetClock
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Set_MCIClock
</UL>

<P><STRONG><a name="[5e]"></a>CLKPWR_SetCLKDiv</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lpc177x_8x_clkpwr.o(i.CLKPWR_SetCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLKPWR_SetCLKDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_PwrOn
</UL>

<P><STRONG><a name="[5b]"></a>CRC16</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, crc.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMsgByte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusProcess
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDUpgradeStm32
</UL>

<P><STRONG><a name="[60]"></a>CallModbus</STRONG> (Thumb, 470 bytes, Stack size 16 bytes, modbusreg.o(i.CallModbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CallModbus &rArr; TxSCIData &rArr; HardWare_UARTSend &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxSCIData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusServe
</UL>

<P><STRONG><a name="[63]"></a>ClearPort</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, i_gpio.o(i.ClearPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ClearPort &rArr; GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGPIO_Output
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>EMAC_GetBufferSts</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lpc177x_8x_emac.o(i.EMAC_GetBufferSts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMAC_GetBufferSts
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_AllocTxBuff
</UL>

<P><STRONG><a name="[76]"></a>EMAC_GetRxBuffer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_GetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>EMAC_GetRxFrameSize</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_GetRxFrameSize))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>EMAC_GetRxFrameStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_GetRxFrameStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>EMAC_GetTxFrameStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_GetTxFrameStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>EMAC_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, lpc177x_8x_emac.o(i.EMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EMAC_Init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_descr_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEmacAddr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_descr_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_TxEnable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_RxEnable
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_IntCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EMAC
</UL>

<P><STRONG><a name="[6d]"></a>EMAC_IntCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_IntCmd))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[fd]"></a>EMAC_Read_PHY</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_Read_PHY))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Reset
</UL>

<P><STRONG><a name="[6f]"></a>EMAC_RxEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_RxEnable))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[ff]"></a>EMAC_SetFullDuplexMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_SetFullDuplexMode))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UpdateStatus
</UL>

<P><STRONG><a name="[100]"></a>EMAC_SetPHYSpeed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_SetPHYSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UpdateStatus
</UL>

<P><STRONG><a name="[6e]"></a>EMAC_TxEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_TxEnable))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[77]"></a>EMAC_UpdateRxConsumeIndex</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_UpdateRxConsumeIndex))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>EMAC_WritePacketBuffer</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lpc177x_8x_emac.o(i.EMAC_WritePacketBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EMAC_WritePacketBuffer &rArr; EMAC_AllocTxBuff &rArr; EMAC_GetBufferSts
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_UpdateTxProduceIndex
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_AllocTxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENETSendData
</UL>

<P><STRONG><a name="[fc]"></a>EMAC_Write_PHY</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lpc177x_8x_emac.o(i.EMAC_Write_PHY))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMAC_Write_PHY
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Reset
</UL>

<P><STRONG><a name="[72]"></a>EMC_PwrOn</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(i.EMC_PwrOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EMC_PwrOn &rArr; CLKPWR_SetCLKDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetCLKDiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[121]"></a>EMC_SetStaMemoryParameter</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(i.EMC_SetStaMemoryParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMC_SetStaMemoryParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[120]"></a>EMC_StaMemConfigEW</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(i.EMC_StaMemConfigEW))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[11d]"></a>EMC_StaMemConfigMW</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(i.EMC_StaMemConfigMW))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMC_StaMemConfigMW
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[11f]"></a>EMC_StaMemConfigPB</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(i.EMC_StaMemConfigPB))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[11e]"></a>EMC_StaMemConfigPM</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(i.EMC_StaMemConfigPM))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[2a]"></a>ENET_IRQHandler</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, lpc177x_8x_emac.o(i.ENET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENET_IRQHandler &rArr; EMAC_GetBufferSts
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_UpdateRxConsumeIndex
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetTxFrameStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetRxFrameStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetRxFrameSize
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetRxBuffer
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetBufferSts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FUN</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.FUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FUN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[78]"></a>Fill_MSCommand</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, usbhost_ms.o(i.Fill_MSCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE32U
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE32U
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[64]"></a>GPIO_ClearValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(i.GPIO_ClearValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPort
</UL>

<P><STRONG><a name="[7d]"></a>GPIO_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lpc177x_8x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_SetDir</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lpc177x_8x_gpio.o(i.GPIO_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_SetValue</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(i.GPIO_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPort
</UL>

<P><STRONG><a name="[80]"></a>GetGPIO_Input</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, motion.o(i.GetGPIO_Input))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetGPIO_Input &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>GetGPIO_Output</STRONG> (Thumb, 144 bytes, Stack size 104 bytes, motion.o(i.GetGPIO_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GetGPIO_Output &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>GetMotionStatus</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, motion.o(i.GetMotionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetMotionStatus &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>GetPosDev</STRONG> (Thumb, 110 bytes, Stack size 120 bytes, motion.o(i.GetPosDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>HW_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hw_init.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = HW_Init &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GPIO_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDRAMInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EXTERN_BUS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>HardWare_Get2Data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i_uart.o(i.HardWare_Get2Data))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSCIData
</UL>

<P><STRONG><a name="[106]"></a>HardWare_Get2State</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i_uart.o(i.HardWare_Get2State))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSCIData
</UL>

<P><STRONG><a name="[103]"></a>HardWare_GetData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i_uart.o(i.HardWare_GetData))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSCIData
</UL>

<P><STRONG><a name="[104]"></a>HardWare_GetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i_uart.o(i.HardWare_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSCIData
</UL>

<P><STRONG><a name="[8b]"></a>HardWare_Init_SDKBus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, i_extern_bus.o(i.HardWare_Init_SDKBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HardWare_Init_SDKBus &rArr; StaticMem_Init &rArr; EMC_PwrOn &rArr; CLKPWR_SetCLKDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EXTERN_BUS_Init
</UL>

<P><STRONG><a name="[8d]"></a>HardWare_UART2Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, i_uart.o(i.HardWare_UART2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HardWare_UART2Init &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>HardWare_UART2Send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i_uart.o(i.HardWare_UART2Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HardWare_UART2Send &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxSCIData
</UL>

<P><STRONG><a name="[96]"></a>HardWare_UARTInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, i_uart.o(i.HardWare_UARTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HardWare_UARTInit &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>HardWare_UARTSend</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i_uart.o(i.HardWare_UARTSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HardWare_UARTSend &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxSCIData
</UL>

<P><STRONG><a name="[98]"></a>Host_CtrlInit</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.Host_CtrlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Host_CtrlInit &rArr; Host_DelayMS &rArr; Host_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TDInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_HCCAInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EDInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[9d]"></a>Host_CtrlRecv</STRONG> (Thumb, 96 bytes, Stack size 36 bytes, lpc177x_8x_usbhost.o(i.Host_CtrlRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
</UL>

<P><STRONG><a name="[a0]"></a>Host_CtrlSend</STRONG> (Thumb, 96 bytes, Stack size 36 bytes, lpc177x_8x_usbhost.o(i.Host_CtrlSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlSend &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[9c]"></a>Host_DelayMS</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.Host_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_DelayMS &rArr; Host_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlInit
</UL>

<P><STRONG><a name="[a1]"></a>Host_DelayUS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.Host_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>

<P><STRONG><a name="[99]"></a>Host_EDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_EDInit))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlInit
</UL>

<P><STRONG><a name="[a2]"></a>Host_EnumDev</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, lpc177x_8x_usbhost.o(i.Host_EnumDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Host_EnumDev &rArr; Host_CtrlSend &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ParseConfiguration
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
</UL>

<P><STRONG><a name="[9e]"></a>Host_FillSetup</STRONG> (Thumb, 86 bytes, Stack size 28 bytes, lpc177x_8x_usbhost.o(i.Host_FillSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>

<P><STRONG><a name="[12b]"></a>Host_GetDeviceType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_GetDeviceType))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
</UL>

<P><STRONG><a name="[9b]"></a>Host_HCCAInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_HCCAInit))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlInit
</UL>

<P><STRONG><a name="[a6]"></a>Host_Init</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.Host_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Host_Init &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
</UL>

<P><STRONG><a name="[a4]"></a>Host_ParseConfiguration</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.Host_ParseConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Host_ParseConfiguration &rArr; ReadLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[9f]"></a>Host_ProcessTD</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lpc177x_8x_usbhost.o(i.Host_ProcessTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WDHWait
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[9a]"></a>Host_TDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_TDInit))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlInit
</UL>

<P><STRONG><a name="[a7]"></a>Host_WDHWait</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_WDHWait))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>

<P><STRONG><a name="[a8]"></a>I2C_Cmd</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lpc177x_8x_i2c.o(i.I2C_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_Init
</UL>

<P><STRONG><a name="[aa]"></a>I2C_Init</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lpc177x_8x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Init &rArr; I2C_SetClock
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetClock
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_Init
</UL>

<P><STRONG><a name="[45]"></a>IRQHandle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.IRQHandle))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[85]"></a>I_EEPROM_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i_eeprom.o(i.I_EEPROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I_EEPROM_Init &rArr; I2C_Init &rArr; I2C_SetClock
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[ac]"></a>I_ENETSendData</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, i_enet.o(i.I_ENETSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I_ENETSendData &rArr; EMAC_WritePacketBuffer &rArr; EMAC_AllocTxBuff &rArr; EMAC_GetBufferSts
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WritePacketBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[ad]"></a>I_ENET_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i_enet.o(i.I_ENET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I_ENET_Init &rArr; Init_EMAC &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[88]"></a>I_EXTERN_BUS_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i_extern_bus.o(i.I_EXTERN_BUS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I_EXTERN_BUS_Init &rArr; HardWare_Init_SDKBus &rArr; StaticMem_Init &rArr; EMC_PwrOn &rArr; CLKPWR_SetCLKDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init_SDKBus
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[89]"></a>I_GPIO_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i_gpio.o(i.I_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = I_GPIO_Init &rArr; Main_GPIO_Init &rArr; SetGPIO_Output &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>I_LWIP_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, i_lwip.o(i.I_LWIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = I_LWIP_Init &rArr; netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UDP_Server
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SYSTICK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[87]"></a>I_SDRAMInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i_sdram.o(i.I_SDRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I_SDRAMInit &rArr; SDRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[b0]"></a>I_SYSTICK_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, i_systick.o(i.I_SYSTICK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I_SYSTICK_Init &rArr; SYSTICK_InternalInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[ba]"></a>InitLink</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, motion.o(i.InitLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InitLink &rArr; driver_SetSdkRst
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkRst
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>InitModBus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.InitModBus))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>Init_UDP_Server</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i_udp.o(i.Init_UDP_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_UDP_Server &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[bf]"></a>LinkConnectTest</STRONG> (Thumb, 42 bytes, Stack size 88 bytes, motion.o(i.LinkConnectTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LinkConnectTest &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDUpgradeStm32
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>MCI_Acmd_SendBusWidth</STRONG> (Thumb, 116 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Acmd_SendBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendACMD
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBusWidth
</UL>

<P><STRONG><a name="[c4]"></a>MCI_Acmd_SendOpCond</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, lpc177x_8x_mci.o(i.MCI_Acmd_SendOpCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MCI_Acmd_SendOpCond &rArr; MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetOutputMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendACMD
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[c6]"></a>MCI_CardInit</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, lpc177x_8x_mci.o(i.MCI_CardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MCI_CardInit &rArr; MCI_Acmd_SendOpCond &rArr; MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetOutputMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendOpCond
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendIfCond
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardReset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
</UL>

<P><STRONG><a name="[c7]"></a>MCI_CardReset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_CardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCI_CardReset &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[c1]"></a>MCI_CheckStatus</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBlockLen
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCSD
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_WriteBlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SelectCard
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_ReadBlock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>

<P><STRONG><a name="[da]"></a>MCI_CmdProcess</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_CmdProcess))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>MCI_CmdResp</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_CmdResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCardAddress
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBlockLen
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardStatus
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCSD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCID
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_WriteBlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendOpCond
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendIfCond
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendACMD
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SelectCard
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_ReadBlock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>

<P><STRONG><a name="[cd]"></a>MCI_Cmd_ReadBlock</STRONG> (Thumb, 158 bytes, Stack size 68 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
</UL>

<P><STRONG><a name="[ce]"></a>MCI_Cmd_SelectCard</STRONG> (Thumb, 206 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MCI_Cmd_SelectCard &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[c2]"></a>MCI_Cmd_SendACMD</STRONG> (Thumb, 122 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SendACMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>

<P><STRONG><a name="[c8]"></a>MCI_Cmd_SendIfCond</STRONG> (Thumb, 126 bytes, Stack size 68 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SendIfCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MCI_Cmd_SendIfCond &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[c9]"></a>MCI_Cmd_SendOpCond</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SendOpCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MCI_Cmd_SendOpCond &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[cf]"></a>MCI_Cmd_StopTransmission</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_StopTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCI_Cmd_StopTransmission &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Read
</UL>

<P><STRONG><a name="[d0]"></a>MCI_Cmd_WriteBlock</STRONG> (Thumb, 158 bytes, Stack size 68 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
</UL>

<P><STRONG><a name="[d1]"></a>MCI_DATA_END_InterruptService</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, lpc177x_8x_mci.o(i.MCI_DATA_END_InterruptService))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MCI_DATA_END_InterruptService
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_TXDisable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_RXDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>MCI_DataErrorProcess</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_DataErrorProcess))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>MCI_FIFOInterruptService</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, lpc177x_8x_mci.o(i.MCI_FIFOInterruptService))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCI_FIFOInterruptService &rArr; MCI_WriteFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteFifo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>MCI_GetCID</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_GetCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MCI_GetCID &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[d8]"></a>MCI_GetCSD</STRONG> (Thumb, 136 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_GetCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MCI_GetCSD &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[18f]"></a>MCI_GetCardAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetCardAddress))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[cb]"></a>MCI_GetCardStatus</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, lpc177x_8x_mci.o(i.MCI_GetCardStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>

<P><STRONG><a name="[18e]"></a>MCI_GetCardType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetCardType))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[cc]"></a>MCI_GetCmdResp</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, lpc177x_8x_mci.o(i.MCI_GetCmdResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCI_GetCmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>

<P><STRONG><a name="[e5]"></a>MCI_GetDataXferEndState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetDataXferEndState))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Read
</UL>

<P><STRONG><a name="[e6]"></a>MCI_GetXferErrState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetXferErrState))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Write
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Read
</UL>

<P><STRONG><a name="[2b]"></a>MCI_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lpc177x_8x_mci.o(i.MCI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MCI_IRQHandler &rArr; MCI_FIFOInterruptService &rArr; MCI_WriteFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FIFOInterruptService
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DataErrorProcess
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DATA_END_InterruptService
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>MCI_Init</STRONG> (Thumb, 550 bytes, Stack size 16 bytes, lpc177x_8x_mci.o(i.MCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MCI_Init &rArr; MCI_CardInit &rArr; MCI_Acmd_SendOpCond &rArr; MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Set_MCIClock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>

<P><STRONG><a name="[d3]"></a>MCI_RXDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_RXDisable))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DATA_END_InterruptService
</UL>

<P><STRONG><a name="[de]"></a>MCI_RXEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_RXEnable))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
</UL>

<P><STRONG><a name="[dd]"></a>MCI_ReadBlock</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MCI_ReadBlock &rArr; MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_RXEnable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_ReadBlock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Read
</UL>

<P><STRONG><a name="[d6]"></a>MCI_ReadFifo</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lpc177x_8x_mci.o(i.MCI_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MCI_ReadFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FIFOInterruptService
</UL>

<P><STRONG><a name="[ca]"></a>MCI_SendCmd</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardReset
</UL>

<P><STRONG><a name="[df]"></a>MCI_SetBlockLen</STRONG> (Thumb, 110 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_SetBlockLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MCI_SetBlockLen &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[e0]"></a>MCI_SetBusWidth</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lpc177x_8x_mci.o(i.MCI_SetBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[e1]"></a>MCI_SetCardAddress</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, lpc177x_8x_mci.o(i.MCI_SetCardAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCI_SetCardAddress &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetOutputMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[c5]"></a>MCI_SetOutputMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_SetOutputMode))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCardAddress
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
</UL>

<P><STRONG><a name="[dc]"></a>MCI_Set_MCIClock</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_Set_MCIClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCI_Set_MCIClock
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[d2]"></a>MCI_TXDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_TXDisable))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DATA_END_InterruptService
</UL>

<P><STRONG><a name="[e3]"></a>MCI_TXEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_TXEnable))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
</UL>

<P><STRONG><a name="[e2]"></a>MCI_WriteBlock</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_TXEnable
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_WriteBlock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Write
</UL>

<P><STRONG><a name="[d5]"></a>MCI_WriteFifo</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, lpc177x_8x_mci.o(i.MCI_WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MCI_WriteFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FIFOInterruptService
</UL>

<P><STRONG><a name="[e4]"></a>MMC_Read</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, diskio.o(i.MMC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = MMC_Read &rArr; MCI_ReadBlock &rArr; MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetXferErrState
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetDataXferEndState
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[e7]"></a>MMC_Write</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, diskio.o(i.MMC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetXferErrState
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetDataXferEndState
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[e8]"></a>MMC_disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, diskio.o(i.MMC_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = MMC_disk_initialize &rArr; mci_read_configuration &rArr; MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[ea]"></a>MS_BulkRecv</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, usbhost_ms.o(i.MS_BulkRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_read
</UL>

<P><STRONG><a name="[eb]"></a>MS_BulkSend</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usbhost_ms.o(i.MS_BulkSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_write
</UL>

<P><STRONG><a name="[ec]"></a>MS_GetMaxLUN</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_GetMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[ed]"></a>MS_GetSenseInfo</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_GetSenseInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MS_GetSenseInfo &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[ee]"></a>MS_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
</UL>

<P><STRONG><a name="[f1]"></a>MS_Inquire</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_Inquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_Inquire &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[f0]"></a>MS_ReadCapacity</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_ReadCapacity &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBE32U
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[ef]"></a>MS_TestUnitReady</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MS_TestUnitReady &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[61]"></a>ModbusProcess</STRONG> (Thumb, 834 bytes, Stack size 64 bytes, modbusreg.o(i.ModbusProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ModbusProcess &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_RegWrite
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_RegRead
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_BitWrite
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_BitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallModbus
</UL>

<P><STRONG><a name="[f9]"></a>ModbusServe</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, modbusreg.o(i.ModbusServe))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ModbusServe &rArr; CallModbus &rArr; TxSCIData &rArr; HardWare_UARTSend &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxSCIData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallModbus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>PHY_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, phylan.o(i.PHY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PHY_Init &rArr; PHY_SetMode &rArr; EMAC_Write_PHY
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_enet.o(i.Init_EMAC)
</UL>
<P><STRONG><a name="[3f]"></a>PHY_Reset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, phylan.o(i.PHY_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PHY_Reset &rArr; EMAC_Write_PHY
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Write_PHY
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Read_PHY
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_enet.o(i.Init_EMAC)
</UL>
<P><STRONG><a name="[fb]"></a>PHY_SetMode</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, phylan.o(i.PHY_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PHY_SetMode &rArr; EMAC_Write_PHY
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Write_PHY
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Read_PHY
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UpdateStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[fe]"></a>PHY_UpdateStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phylan.o(i.PHY_UpdateStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PHY_UpdateStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetPHYSpeed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetFullDuplexMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetMode
</UL>

<P><STRONG><a name="[8e]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc177x_8x_pinsel.o(i.PINSEL_ConfigPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EMAC
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UART2Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>

<P><STRONG><a name="[101]"></a>PINSEL_GetPinType</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, lpc177x_8x_pinsel.o(i.PINSEL_GetPinType))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[f2]"></a>ReadBE32U</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.ReadBE32U))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
</UL>

<P><STRONG><a name="[a3]"></a>ReadLE16U</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.ReadLE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ParseConfiguration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[3a]"></a>Reg_Read</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.Reg_Read))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.InitModBus)
</UL>
<P><STRONG><a name="[3b]"></a>Reg_Write</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.Reg_Write))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.InitModBus)
</UL>
<P><STRONG><a name="[fa]"></a>RxSCIData</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, modbusreg.o(i.RxSCIData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RxSCIData
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_GetState
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_GetData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Get2State
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Get2Data
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusServe
</UL>

<P><STRONG><a name="[107]"></a>SAxisPmove</STRONG> (Thumb, 82 bytes, Stack size 128 bytes, motion.o(i.SAxisPmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SAxisPmove &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>SDUpgradeStm32</STRONG> (Thumb, 492 bytes, Stack size 2664 bytes, upgradestm32.o(i.SDUpgradeStm32))
<BR><BR>[Stack]<UL><LI>Max Depth = 3236<LI>Call Chain = SDUpgradeStm32 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpgradeStart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpgradeEnd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpgradeData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpgrade
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkConnectTest
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>SYSTICK_ClearCounterFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_systick.o(i.SYSTICK_ClearCounterFlag))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b9]"></a>SYSTICK_Cmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc177x_8x_systick.o(i.SYSTICK_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SYSTICK_Init
</UL>

<P><STRONG><a name="[b8]"></a>SYSTICK_IntCmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc177x_8x_systick.o(i.SYSTICK_IntCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SYSTICK_Init
</UL>

<P><STRONG><a name="[b7]"></a>SYSTICK_InternalInit</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lpc177x_8x_systick.o(i.SYSTICK_InternalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSTICK_InternalInit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SYSTICK_Init
</UL>

<P><STRONG><a name="[5d]"></a>SendCmd</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, motion.o(i.SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkRst
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkMsg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkAck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SDKW_Fifo
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SDKR_Fifo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_GetSdkRxe
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_GetSdkMsg
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMsgByte
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosDev
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotionDir
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGPIO_Output
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpgradeStart
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpgradeEnd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpgradeData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUpgrade
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAxisPmove
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkConnectTest
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosDev
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotionStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPIO_Output
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPIO_Input
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufStop
</UL>

<P><STRONG><a name="[10a]"></a>SendUpgrade</STRONG> (Thumb, 42 bytes, Stack size 96 bytes, motion.o(i.SendUpgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendUpgrade &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDUpgradeStm32
</UL>

<P><STRONG><a name="[10f]"></a>SendUpgradeData</STRONG> (Thumb, 68 bytes, Stack size 104 bytes, motion.o(i.SendUpgradeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SendUpgradeData &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDUpgradeStm32
</UL>

<P><STRONG><a name="[110]"></a>SendUpgradeEnd</STRONG> (Thumb, 42 bytes, Stack size 96 bytes, motion.o(i.SendUpgradeEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendUpgradeEnd &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDUpgradeStm32
</UL>

<P><STRONG><a name="[10b]"></a>SendUpgradeStart</STRONG> (Thumb, 42 bytes, Stack size 96 bytes, motion.o(i.SendUpgradeStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendUpgradeStart &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDUpgradeStm32
</UL>

<P><STRONG><a name="[f4]"></a>SetGPIO_Output</STRONG> (Thumb, 586 bytes, Stack size 104 bytes, motion.o(i.SetGPIO_Output))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetGPIO_Output &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPort
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPort
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>

<P><STRONG><a name="[11a]"></a>SetLmtMode</STRONG> (Thumb, 174 bytes, Stack size 128 bytes, motion.o(i.SetLmtMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SetLmtMode &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>SetMotionDir</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, motion.o(i.SetMotionDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetMotionDir &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>SetPort</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, i_gpio.o(i.SetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetPort &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGPIO_Output
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>

<P><STRONG><a name="[11c]"></a>SetPosDev</STRONG> (Thumb, 62 bytes, Stack size 104 bytes, motion.o(i.SetPosDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>StaticMem_Init</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, lpc177x_8x_emc.o(i.StaticMem_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = StaticMem_Init &rArr; EMC_PwrOn &rArr; CLKPWR_SetCLKDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigPM
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigPB
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigMW
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigEW
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_SetStaMemoryParameter
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_PwrOn
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init_SDKBus
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i_systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClearCounterFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 664 bytes, Stack size 12 bytes, system_lpc177x_8x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetCLKDiv
</UL>

<P><STRONG><a name="[18c]"></a>SystemInit</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, system_lpc177x_8x.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i_timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER2_IRQHandler &rArr; TIM_GetIntStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>TIM_ClearIntPending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(i.TIM_ClearIntPending))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>TIM_GetIntStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lpc177x_8x_timer.o(i.TIM_GetIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_GetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>TxSCIData</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, modbusreg.o(i.TxSCIData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TxSCIData &rArr; HardWare_UARTSend &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTSend
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UART2Send
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallModbus
</UL>

<P><STRONG><a name="[13]"></a>UART0_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, i_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART2_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, i_uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>UART_ConfigStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UART2Init
</UL>

<P><STRONG><a name="[92]"></a>UART_FIFOConfig</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, lpc177x_8x_uart.o(i.UART_FIFOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_FIFOConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UART2Init
</UL>

<P><STRONG><a name="[91]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_FIFOConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UART2Init
</UL>

<P><STRONG><a name="[125]"></a>UART_GetIntId</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_GetIntId))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>UART_GetLineStatus</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_GetLineStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>UART_Init</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, lpc177x_8x_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UART2Init
</UL>

<P><STRONG><a name="[95]"></a>UART_Send</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, lpc177x_8x_uart.o(i.UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTSend
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UART2Send
</UL>

<P><STRONG><a name="[129]"></a>UART_SendByte</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
</UL>

<P><STRONG><a name="[93]"></a>UART_TxCmd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lpc177x_8x_uart.o(i.UART_TxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UART2Init
</UL>

<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 308 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.USB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>USB_disk_initialize</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, usbdisk.o(i.USB_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USB_disk_initialize &rArr; MS_Init &rArr; MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_GetDeviceType
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[12c]"></a>USB_disk_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, usbdisk.o(i.USB_disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USB_disk_read &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[12d]"></a>USB_disk_write</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, usbdisk.o(i.USB_disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = USB_disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteLE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[7b]"></a>WriteBE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.WriteBE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[7a]"></a>WriteBE32U</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.WriteBE32U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[a5]"></a>WriteLE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.WriteLE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>

<P><STRONG><a name="[79]"></a>WriteLE32U</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.WriteLE32U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[140]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[145]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = disk_initialize &rArr; MMC_disk_initialize &rArr; mci_read_configuration &rArr; MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[146]"></a>disk_read</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = disk_read &rArr; MMC_Read &rArr; MCI_ReadBlock &rArr; MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_read
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[166]"></a>disk_status</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[147]"></a>disk_write</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_write
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[115]"></a>driver_GetSdkMsg</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, i_extern_bus.o(i.driver_GetSdkMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = driver_GetSdkMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SDKR_Stu
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[117]"></a>driver_GetSdkRxe</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, i_extern_bus.o(i.driver_GetSdkRxe))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = driver_GetSdkRxe
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SDKR_Stu
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[116]"></a>driver_SDKR_Fifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_SDKR_Fifo))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[148]"></a>driver_SDKR_Stu</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_SDKR_Stu))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_GetSdkRxe
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_GetSdkMsg
</UL>

<P><STRONG><a name="[149]"></a>driver_SDKW_Cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_SDKW_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkRst
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkMsg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkAck
</UL>

<P><STRONG><a name="[113]"></a>driver_SDKW_Fifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_SDKW_Fifo))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[118]"></a>driver_SetSdkAck</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, i_extern_bus.o(i.driver_SetSdkAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = driver_SetSdkAck
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SDKW_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[114]"></a>driver_SetSdkMsg</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, i_extern_bus.o(i.driver_SetSdkMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = driver_SetSdkMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SDKW_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[bb]"></a>driver_SetSdkRst</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, i_extern_bus.o(i.driver_SetSdkRst))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = driver_SetSdkRst
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SDKW_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLink
</UL>

<P><STRONG><a name="[41]"></a>etharp_output</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[153]"></a>etharp_query</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[155]"></a>etharp_request</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[38]"></a>ethernet_input</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_lwip.o(i.I_LWIP_Init)
</UL>
<P><STRONG><a name="[39]"></a>ethernetif_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; I_ENET_Init &rArr; Init_EMAC &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_lwip.o(i.I_LWIP_Init)
</UL>
<P><STRONG><a name="[10d]"></a>f_lseek</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDUpgradeStm32
</UL>

<P><STRONG><a name="[8a]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[10c]"></a>f_open</STRONG> (Thumb, 374 bytes, Stack size 88 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDUpgradeStm32
</UL>

<P><STRONG><a name="[10e]"></a>f_read</STRONG> (Thumb, 414 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDUpgradeStm32
</UL>

<P><STRONG><a name="[136]"></a>ff_convert</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cc936.o(i.ff_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[131]"></a>ff_wtoupper</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, cc936.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[133]"></a>get_fat</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[162]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ff.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[167]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[169]"></a>icmp_input</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[16e]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[16b]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[16a]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[170]"></a>inet_chksum_pseudo</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[151]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[171]"></a>ip_frag</STRONG> (Thumb, 434 bytes, Stack size 96 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[15b]"></a>ip_input</STRONG> (Thumb, 534 bytes, Stack size 32 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = ip_input &rArr; ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[16d]"></a>ip_output</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[16c]"></a>ip_output_if</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[17a]"></a>ip_reass</STRONG> (Thumb, 454 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[17d]"></a>ip_route</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[14d]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[b1]"></a>lwip_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lwip_init &rArr; memp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[172]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[4f]"></a>main</STRONG> (Thumb, 472 bytes, Stack size 72 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3308<LI>Call Chain = main &rArr; SDUpgradeStm32 &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPort
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPort
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosDev
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotionDir
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAxisPmove
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkConnectTest
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLink
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosDev
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotionStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPIO_Output
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGPIO_Input
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufStop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusServe
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regIRQ
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regCB
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDUpgradeStm32
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GPIO_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UART2Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModBus
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e9]"></a>mci_read_configuration</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, diskio.o(i.mci_read_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = mci_read_configuration &rArr; MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Set_MCIClock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCardAddress
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBusWidth
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBlockLen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardType
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardAddress
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCSD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCID
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SelectCard
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unstuff_bits
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>

<P><STRONG><a name="[192]"></a>mem_free</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[186]"></a>mem_init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, mem.o(i.mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[15c]"></a>mem_malloc</STRONG> (Thumb, 338 bytes, Stack size 20 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[198]"></a>mem_trim</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[178]"></a>memp_free</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>

<P><STRONG><a name="[187]"></a>memp_init</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[177]"></a>memp_malloc</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
</UL>

<P><STRONG><a name="[b2]"></a>netif_add</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netif_add &rArr; netif_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[188]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[194]"></a>netif_set_addr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netif_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[b3]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[197]"></a>netif_set_gw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[195]"></a>netif_set_ipaddr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[196]"></a>netif_set_netmask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[b4]"></a>netif_set_up</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[156]"></a>pbuf_alloc</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[174]"></a>pbuf_alloced_custom</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[176]"></a>pbuf_cat</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[17e]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[157]"></a>pbuf_copy</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[14b]"></a>pbuf_free</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_server_rev
</UL>

<P><STRONG><a name="[150]"></a>pbuf_header</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[179]"></a>pbuf_realloc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[158]"></a>pbuf_ref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[134]"></a>put_fat</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[17b]"></a>raw_input</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[18a]"></a>regCB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i_udp.o(i.regCB))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>regIRQ</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i_systick.o(i.regIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>rx_descr_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.rx_descr_init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[6a]"></a>setEmacAddr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.setEmacAddr))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[185]"></a>stats_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stats.o(i.stats_init))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[6c]"></a>tx_descr_init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.tx_descr_init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[bd]"></a>udp_bind</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UDP_Server
</UL>

<P><STRONG><a name="[189]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[17c]"></a>udp_input</STRONG> (Thumb, 564 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[bc]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_new &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UDP_Server
</UL>

<P><STRONG><a name="[be]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UDP_Server
</UL>

<P><STRONG><a name="[40]"></a>udp_server_rev</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, i_udp.o(i.udp_server_rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = udp_server_rev &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_udp.o(i.Init_UDP_Server)
</UL>
<P><STRONG><a name="[191]"></a>unstuff_bits</STRONG> (Thumb, 140 bytes, Stack size 28 bytes, diskio.o(i.unstuff_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = unstuff_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[19d]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
</UL>

<P><STRONG><a name="[1d3]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1d4]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[19b]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[19f]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[19c]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
</UL>

<P><STRONG><a name="[19e]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[65]"></a>EMAC_AllocTxBuff</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lpc177x_8x_emac.o(i.EMAC_AllocTxBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EMAC_AllocTxBuff &rArr; EMAC_GetBufferSts
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetBufferSts
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WritePacketBuffer
</UL>

<P><STRONG><a name="[71]"></a>EMAC_UpdateTxProduceIndex</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_UpdateTxProduceIndex))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WritePacketBuffer
</UL>

<P><STRONG><a name="[102]"></a>PIN_GetPointer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lpc177x_8x_pinsel.o(i.PIN_GetPointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[a9]"></a>I2C_GetPointer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc177x_8x_i2c.o(i.I2C_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>

<P><STRONG><a name="[ab]"></a>I2C_SetClock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lpc177x_8x_i2c.o(i.I2C_SetClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SetClock
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[127]"></a>uart_get_pointer</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.uart_get_pointer))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[128]"></a>uart_set_divisors</STRONG> (Thumb, 478 bytes, Stack size 88 bytes, lpc177x_8x_uart.o(i.uart_set_divisors))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_GetPointer</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lpc177x_8x_gpio.o(i.GPIO_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[190]"></a>swap_buff</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, diskio.o(i.swap_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[12e]"></a>check_fs</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[137]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[130]"></a>cmp_lfn</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[132]"></a>create_chain</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[135]"></a>create_name</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = create_name &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[139]"></a>dir_alloc</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[13c]"></a>dir_find</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[13b]"></a>dir_next</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[141]"></a>dir_register</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[13a]"></a>dir_sdi</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[160]"></a>find_volume</STRONG> (Thumb, 866 bytes, Stack size 88 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[144]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(i.fit_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[161]"></a>follow_path</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[143]"></a>gen_numname</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[15f]"></a>get_ldnumber</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[163]"></a>ld_clust</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(i.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[13e]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[142]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[138]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[12f]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[165]"></a>remove_chain</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[164]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[13d]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.sum_sfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[13f]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[15e]"></a>validate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[f8]"></a>m_BitRead</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, modbusreg.o(i.m_BitRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_BitRead
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusProcess
</UL>

<P><STRONG><a name="[f7]"></a>m_BitWrite</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, modbusreg.o(i.m_BitWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_BitWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusProcess
</UL>

<P><STRONG><a name="[f5]"></a>m_RegRead</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, modbusreg.o(i.m_RegRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_RegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusProcess
</UL>

<P><STRONG><a name="[f6]"></a>m_RegWrite</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, modbusreg.o(i.m_RegWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = m_RegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusProcess
</UL>

<P><STRONG><a name="[193]"></a>plug_holes</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[19a]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[168]"></a>icmp_send_response</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
</UL>

<P><STRONG><a name="[16f]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[173]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[175]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[181]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[182]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[180]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[184]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[17f]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[43]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[14a]"></a>etharp_arp_input</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = etharp_arp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[14e]"></a>etharp_find_entry</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[14f]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[152]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[159]"></a>etharp_raw</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[154]"></a>etharp_send_ip</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[14c]"></a>etharp_update_arp_entry</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[15d]"></a>low_level_init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = low_level_init &rArr; I_ENET_Init &rArr; Init_EMAC &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENET_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[42]"></a>low_level_output</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = low_level_output &rArr; I_ENETSendData &rArr; EMAC_WritePacketBuffer &rArr; EMAC_AllocTxBuff &rArr; EMAC_GetBufferSts
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENETSendData
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[ae]"></a>Init_EMAC</STRONG> (Thumb, 186 bytes, Stack size 64 bytes, i_enet.o(i.Init_EMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Init_EMAC &rArr; PINSEL_ConfigPin &rArr; PIN_GetPointer
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENET_Init
</UL>

<P><STRONG><a name="[af]"></a>Main_GPIO_Init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, i_gpio.o(i.Main_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Main_GPIO_Init &rArr; SetGPIO_Output &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPort
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGPIO_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GPIO_Init
</UL>

<P><STRONG><a name="[b6]"></a>SDRAMInit</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, i_sdram.o(i.SDRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysDelayNS
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDRAMInit
</UL>

<P><STRONG><a name="[108]"></a>sysDelayNS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i_sdram.o(i.sysDelayNS))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
