#ifndef _MOTION_H_
#define _MOTION_H_

#include "GlobalDefine.h"

/****************************************************************************************
缓冲轨迹信息结构体
struct LayoutCmd{
	long X;						//X轴目标点	
	long Y;						//Y轴目标点	
	long Z;						//Z轴目标点
	long U;						//U轴目标点
	long V;						//V轴目标点
	unsigned long LineIndex;    //行号索引
	unsigned long Speed;		//插补合速度
};
****************************************************************************************/
typedef struct LayoutCmd_PC LayoutCmd;

/****************************************************************************************
功    能:	初始化连接
参    数:   			
返 回 值:
****************************************************************************************/
void InitLink(void);

/****************************************************************************************
功    能:	链接测试,返回0测试成功
参    数:   			
返 回 值:
****************************************************************************************/
long LinkConnectTest(void);

/****************************************************************************************
功    能:	轴运动
参    数:   Axis    :轴号
			Pulse   :脉冲数
			StartV  :起始速度
			Acc     :加速度
			Speed   :最终速度			
返 回 值:
****************************************************************************************/
long SAxisPmove(unsigned char Axis,long Pulse,unsigned long StartV,unsigned long Acc,unsigned long Speed);

/****************************************************************************************
功    能:	轴减速停止
参    数:   Axis    :轴号			
返 回 值:
****************************************************************************************/
long SAxisDec_stop(unsigned char Axis);

/****************************************************************************************
功    能:	获取输入
参    数:   long *Dat: 获取输入状态值(0x0000000 ~ 0xfffffff)
			输入以二进制的方式从小到大的排序为:
			X05 X06 X07 X08  X01 X02 X03 X04  X09 A+ HA A-  R+ HR R- Z+  (X00 ~ X16)
			HZ  Z-  Y+  HY   Y-  X+  HX  X-   S/P ALM RST STOP           (X17 ~ X27)
			说明:
			HX: X轴原点  HY: Y轴原点  HZ: Z轴原点  HA:  A轴原点  HR: R轴原点
			S/P: 启动/暂停  ALM: 警告  RST: 复位  STOP: 停止
			输入信号端口对应顺序为:
			IN00 IN01 IN02 IN03  IN04 IN05 IN06 IN07  IN08 IN09 IN10 IN11 (IN00 ~ IN11)
			X05  X06  X07  X08   X01  X02  X03  X04   X09  A+   HA   A-   
			IN12 IN13 IN14 IN15  IN16 IN17 IN18 IN19  IN20 IN21 IN22 IN23 (IN12 ~ IN23)
			R+   HR   R-   Z+    HZ   Z-   Y+   HY    Y-   X+   HX   X-
			IN24 IN25 IN26 IN27                                           (IN24 ~ IN27)
			S/P  ALM  RST  STOP
返 回 值:
****************************************************************************************/
long GetGPIO_Input(long *Dat);

/****************************************************************************************
功    能:	获取输出
参    数:   Dat        :获取的输出状态值
            输入以二进制的方式从小到大的排序为(H指原点 HA指A轴原点):
			Y00 Y01 Y02 Y03  Y04 Y05 Y06 Y07  Y08 Y09 Y10 Y11  Y12 Y13 Y14 Y15(Y00 ~ Y15)
返 回 值:
****************************************************************************************/
long GetGPIO_Output(long *Dat);

/****************************************************************************************
功    能:	输出位控制(电平为1继电器通,继电器+接24v,-接地)
参    数:	BitIndex   :指输出端口号(0 ~ 15)
			BitValue   :只输出端口的电平(0 ~ 1)
返 回 值:
****************************************************************************************/
long SetGPIO_Output(unsigned char BitIndex, unsigned char BitValue);

/****************************************************************************************
功    能:	获取轴运动状态,所有轴停止获取的状态为0,否则非0
参    数:	Sta   :获取轴的运动状态,运动状态如下
			0 :所有轴停止
			1 :第1轴正在运动(X轴)
			2 :第2轴正在运动(Y轴)
			4 :第1轴正在运动(Z轴)
			8 :第2轴正在运动(R轴)
			16:第1轴正在运动(A轴)
返 回 值:
****************************************************************************************/
long GetMotionStatus(unsigned long *Sta);

/****************************************************************************************
功    能:	获取各轴位置
参    数:	X: 第1轴位置  Y: 第2轴位置  Z: 第3轴位置  U: 第4轴位置  V: 第5轴位置
返 回 值:
****************************************************************************************/
long GetPosDev(long *X,long *Y,long *Z,long *U,long *V,long *W,long *A,long *B);

/****************************************************************************************
功    能:	获取正在做插补运动的行号
参    数:	Dat    :查询当前加工轨迹索引值,索引值为当前行写入轨迹时的行号
返 回 值:
****************************************************************************************/
long GetWorkIndex(unsigned long *Dat);     //获取行号

/****************************************************************************************
功    能:	硬件IO限位使能控制(0:使能打开 1:使能关闭)
参    数:	Onoff   :使能打开或关闭
返 回 值:
****************************************************************************************/
long Lmt_Disable(unsigned char Onoff);

/****************************************************************************************
功    能:	开始轨迹规划,用于写一部分数据给运动规划单元然后再开始运动,防止频繁加减速
参    数:	Onoff   :轨迹规划启动或停止(1:启动轨迹规划  0:停止轨迹规划)
返 回 值:
****************************************************************************************/
long LayoutStart(unsigned char Onoff);

/****************************************************************************************
功    能:	轨迹规划在指定行结束,指定行通常为最后一行行号
参    数:	Index   :轨迹结束指定行
返 回 值:
****************************************************************************************/
long LocusEnd(unsigned long Index);		//最后一行行号,表示轨迹在这一行结束

/****************************************************************************************
功    能:	设置各轴正负限位端口与限位信号有效电平
参    数:	XLmtIo    :正限位IO
			XLmtBIo   :负限位IO
			XLmtLog   :正限位有效电平
			XLmtBLog  :负限位有效电平
返 回 值:
****************************************************************************************/
long SetLmtMode(unsigned char XLmtIo,unsigned char YLmtIo,unsigned char ZLmtIo,unsigned char ULmtIo,unsigned char VLmtIo,
				unsigned char XLmtBIo,unsigned char YLmtBIo,unsigned char ZLmtBIo,unsigned char ULmtBIo,unsigned char VLmtBIo,
				unsigned char XLmtLog,unsigned char YLmtLog,unsigned char ZLmtLog,unsigned char ULmtLog,unsigned char VLmtLog,
				unsigned char XLmtBLog,unsigned char YLmtBLog,unsigned char ZLmtBLog,unsigned char ULmtBLog,unsigned char VLmtBLog);

/****************************************************************************************
功    能:	设置轴方向 0000 0000 1111 1000 二进制位功能如下: 
			第0~3位: 23:运动禁止位
			第4~7位: 脉冲换向位  5->X 6->Y 7->Z 8->A
			第8~B位: B:运动禁止位
			第C~F位: 脉冲换向位  F->B
参    数:	
返 回 值:   
****************************************************************************************/				
long SetMotionDir(unsigned short Value);
				
/****************************************************************************************
功    能:	设置特定轴位置,主要用于清零当前位置
参    数:	Axis  :轴号
			Pos   :轴设定脉冲数(位置)
返 回 值:
****************************************************************************************/
long SetPosDev(short Axis,long Pos);

/****************************************************************************************
功    能:	特定轴紧急停止
参    数:	Axis  :紧急停止轴轴号
返 回 值:
****************************************************************************************/
long sudden_stop(unsigned char Axis);	//紧急停止	
						 
/****************************************************************************************
功    能:	设置原点为连续轨迹的起始点
参    数:	X: 第1轴坐标  Y: 第2轴坐标  Z: 第3轴坐标  U: 第4轴坐标  V: 第5轴坐标
返 回 值:
****************************************************************************************/
long BufOrg(long X,long Y,long Z,long U,long V);

/****************************************************************************************
功    能:	设置轨迹运动速度
参    数:	StartV     :轨迹起始速度
			MinSpeed   :轨迹初速度
			Acc        :轨迹加速度
			Speed      :轨迹最终匀速速度
			AngleSpeed :轨迹转弯速度
返 回 值:
****************************************************************************************/
long MotionConfig(unsigned long StartV,unsigned long MinSpeed,unsigned long Acc,unsigned long Speed,unsigned long AngleSpeed);

/****************************************************************************************
功    能:	开始轨迹,先设置开始然后写入轨迹
参    数:	
返 回 值:
****************************************************************************************/
long BufStart(void);

/****************************************************************************************
功    能:	清除轨迹数据
参    数:	
返 回 值:
****************************************************************************************/
long BufClr(void);

/****************************************************************************************
功    能:	轨迹减速停止
参    数:	
返 回 值:
****************************************************************************************/
long BufStop(void);
				
/****************************************************************************************
功    能:	轨迹数据发送至缓冲区
参    数:	LayoutCmd_PC :每条数据的信息,信息中包含速度,索引和坐标
			BeginIndex   :写入数据开始索引
			Count        :发送数据条数
			ResV         :写成功多少条数据
返 回 值:
****************************************************************************************/
long BatchLine(struct LayoutCmd_PC *Cmd,unsigned short BeginIndex,unsigned char Count,unsigned char *ResV);

/****************************************************************************************
功    能:	设置脉冲当量比例,用于解决各轴脉冲当量不一致加的问题.计算各轴的脉冲当量然后获
			取最小脉冲当量,各轴脉冲当量除以这个最小值,把计算的结果存入float数组中并设置进
			去(注:计算出的值大于1.0,不参与运动轴的值可设置为1.0)
参    数:	*Val    :各轴脉冲当量除以最小脉冲当量计算出的值
返 回 值:
****************************************************************************************/
long SetAxisScale( float *Val);

/****************************************************************************************
功    能:	轨迹平滑等级(等级1 ~ 64),数值越大轨迹越平滑但是轨迹变形也越严重	
参    数:	
返 回 值:
****************************************************************************************/
long SetSmoothLevel(unsigned char Level);

/****************************************************************************************
功    能:	配置联动模式(1:联动 0:不联动)
参    数:	unsigned char X: X轴联动标志(1:联动 0:不联动)
			unsigned char Y: Y轴联动标志(1:联动 0:不联动)
			unsigned char Z: Z轴联动标志(1:联动 0:不联动)
			unsigned char U: U轴联动标志(1:联动 0:不联动)
			unsigned char V: V轴联动标志(1:联动 0:不联动)
返 回 值:
****************************************************************************************/
long SetMoveTogetherMode(unsigned char X,unsigned char Y,unsigned char Z,unsigned char U,unsigned char V);

/****************************************************************************************
功    能:	获取STM32版本号
参    数:	unsigned long *Ver:
返 回 值:
****************************************************************************************/
long GetSTM32VerDev(unsigned long *Ver);

/****************************************************************************************
功    能:	获取FPGA版本号
参    数:	unsigned long *Ver:
返 回 值:
****************************************************************************************/
long GetFpgaVerDev(unsigned long *Ver);


long SynAxisConfig(unsigned long StartV,unsigned long Acc,unsigned long Speed,unsigned long LoopMax);//无用
long SetAxisMap(unsigned char *MapDat);     //无用函数,底下无响应
long SetSynGpoutMask( unsigned short Mask); //无用函数,底下无响应
long GetTimeOut(void);          //无用
void SetTimeOut(long Value);    //无用 
short GetReSend(void);          //无用
void SetReSend(short Value);    //无用
long GetErrPack(void);          //无用
void SetErrPack(long Value);    //无用
long GetTimePack(void);         //无用
void SetTimePack(long Value);   //无用

#endif
