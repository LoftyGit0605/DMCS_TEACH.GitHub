<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\LPC1788_NON_OS_LWIP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\LPC1788_NON_OS_LWIP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Jul 08 13:11:37 2016
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
udp_server_rev &rArr; Link_PC_Recive_UDP &rArr; MyPCLink &rArr; MyPCCommand &rArr; Link_PC_PMove_Mode_SpeedBeiginAcc &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[21]">BOD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2c]">CANActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[32]">EEPROM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1c]">EINT0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1d]">EINT1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1e]">EINT2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1f]">EINT3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[26]">ENET_IRQHandler</a> from lpc177x_8x_emac.o(i.ENET_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[30]">GPIO_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[16]">I2C2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2f]">LCD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[27]">MCI_IRQHandler</a> from lpc177x_8x_mci.o(i.MCI_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[28]">MCPWM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[37]">PHY_Init</a> from phylan.o(i.PHY_Init) referenced from i_enet.o(i.Init_EMAC)
 <LI><a href="#[38]">PHY_Reset</a> from phylan.o(i.PHY_Reset) referenced from i_enet.o(i.Init_EMAC)
 <LI><a href="#[1a]">PLL0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2a]">PLL1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[31]">PWM0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[29]">QEI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[17]">SPIFI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[19]">SSP1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2e]">SSP2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from i_systick.o(i.SysTick_Handler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from i_timer.o(i.TIMER2_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from i_uart.o(i.UART0_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from i_uart.o(i.UART2_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2d]">UART4_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2b]">USBActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[22]">USB_IRQHandler</a> from lpc177x_8x_usbhost.o(i.USB_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[34]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[3a]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[35]">ethernet_input</a> from etharp.o(i.ethernet_input) referenced from i_lwip.o(i.I_LWIP_Init)
 <LI><a href="#[36]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from i_lwip.o(i.I_LWIP_Init)
 <LI><a href="#[3c]">ipfrag_free_pbuf_custom</a> from ip_frag.o(i.ipfrag_free_pbuf_custom) referenced from ip_frag.o(i.ip_frag)
 <LI><a href="#[3b]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[33]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[39]">udp_server_rev</a> from i_udp.o(i.udp_server_rev) referenced from i_udp.o(i.Init_UDP_Server)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[34]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[51]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[216]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[217]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[218]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[219]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[21a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_write
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_read
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_UserSendParamData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetLmtMode
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_server_rev
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_WR
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetAxisOrgPosAll
</UL>

<P><STRONG><a name="[21e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1da]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos_DBSG_X
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSG_DownUpTimesCount
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos_DBSG_X
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_fmul</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPos_Abs_Axis
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisBendMoveCheckDaoWei
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
</UL>

<P><STRONG><a name="[ad]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
</UL>

<P><STRONG><a name="[21f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPos_Abs_Axis
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisBendMoveCheckDaoWei
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[221]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[222]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[46]"></a>_float_epilogue</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[50]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4b]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[224]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>APP_RUNNING_LED</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hw_init.o(i.APP_RUNNING_LED))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_RUNNING_LED &rArr; GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
</UL>

<P><STRONG><a name="[81]"></a>Abs_int</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, worklib.o(i.Abs_int))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSG_DownUpTimesCount
</UL>

<P><STRONG><a name="[55]"></a>AddMsgByte</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, motion.o(i.AddMsgByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[205]"></a>AppJumpToBoot</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.AppJumpToBoot))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>AxisBendMoveCheckDaoWei</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, worklib.o(i.AxisBendMoveCheckDaoWei))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = AxisBendMoveCheckDaoWei &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBendModeCCW_CW
</UL>

<P><STRONG><a name="[5e]"></a>AxisDBSGSetCurrIO</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, worklib.o(i.AxisDBSGSetCurrIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = AxisDBSGSetCurrIO &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneIOAfterCheckInIO
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpOutIOStuSigle
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
</UL>

<P><STRONG><a name="[61]"></a>AxisDBSiGanChangeUpDown</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, worklib.o(i.AxisDBSiGanChangeUpDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneIOAfterCheckInIO
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpOutIOStuSigle
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
</UL>

<P><STRONG><a name="[62]"></a>AxisMove</STRONG> (Thumb, 504 bytes, Stack size 72 bytes, worklib.o(i.AxisMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = AxisMove &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosDev
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBendModeCCW_CW
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos_DBSG_X
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_Distance
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_RelPos
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_AbsPos
</UL>

<P><STRONG><a name="[6a]"></a>AxisMove_AbsPos</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, worklib.o(i.AxisMove_AbsPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = AxisMove_AbsPos &rArr; AxisMove &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PMove_Mode
</UL>

<P><STRONG><a name="[6b]"></a>AxisMove_AbsPos_SpeedBegin_Acc</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, worklib.o(i.AxisMove_AbsPos_SpeedBegin_Acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = AxisMove_AbsPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PMove_Mode_SpeedBeiginAcc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Abs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbs
</UL>

<P><STRONG><a name="[6d]"></a>AxisMove_Distance</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, worklib.o(i.AxisMove_Distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = AxisMove_Distance &rArr; AxisMove &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PMove_Mode
</UL>

<P><STRONG><a name="[6e]"></a>AxisMove_Distance_SpeedBegin_Acc</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, worklib.o(i.AxisMove_Distance_SpeedBegin_Acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PMove_Mode_SpeedBeiginAcc
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDis
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Dis
</UL>

<P><STRONG><a name="[6f]"></a>AxisMove_RelPos</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, worklib.o(i.AxisMove_RelPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = AxisMove_RelPos &rArr; AxisMove &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PMove_Mode
</UL>

<P><STRONG><a name="[70]"></a>AxisMove_RelPos_SpeedBegin_Acc</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, worklib.o(i.AxisMove_RelPos_SpeedBegin_Acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PMove_Mode_SpeedBeiginAcc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Rel
</UL>

<P><STRONG><a name="[6c]"></a>AxisMove_SpeedBegin_Acc</STRONG> (Thumb, 474 bytes, Stack size 80 bytes, worklib.o(i.AxisMove_SpeedBegin_Acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosDev
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBendModeCCW_CW
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos_DBSG_X
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_Distance_SpeedBegin_Acc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_RelPos_SpeedBegin_Acc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_AbsPos_SpeedBegin_Acc
</UL>

<P><STRONG><a name="[71]"></a>AxisXMoveCheckDaoWei</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, worklib.o(i.AxisXMoveCheckDaoWei))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = AxisXMoveCheckDaoWei &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
</UL>

<P><STRONG><a name="[72]"></a>BufStop</STRONG> (Thumb, 32 bytes, Stack size 80 bytes, motion.o(i.BufStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BufStop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_All_stop
</UL>

<P><STRONG><a name="[87]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(i.CLKPWR_ConfigPPWR))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_PwrOn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[88]"></a>CLKPWR_GetCLK</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(i.CLKPWR_GetCLK))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_PwrOn
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Set_MCIClock
</UL>

<P><STRONG><a name="[74]"></a>CLKPWR_SetCLKDiv</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(i.CLKPWR_SetCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLKPWR_SetCLKDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_PwrOn
</UL>

<P><STRONG><a name="[56]"></a>CRC16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, crc.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMsgByte
</UL>

<P><STRONG><a name="[123]"></a>CalcuMmToPulse</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, parameter.o(i.CalcuMmToPulse))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_UserSendParamData
</UL>

<P><STRONG><a name="[76]"></a>CheckBendIOIn_OnOff</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, worklib.o(i.CheckBendIOIn_OnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CheckBendIOIn_OnOff &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFourIOStu
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBendModeCCW_CW
</UL>

<P><STRONG><a name="[77]"></a>CheckFourIOStu</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, worklib.o(i.CheckFourIOStu))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CheckFourIOStu &rArr; GetGpIn &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBendIOIn_OnOff
</UL>

<P><STRONG><a name="[78]"></a>CheckIOAlarm</STRONG> (Thumb, 518 bytes, Stack size 24 bytes, main.o(i.CheckIOAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSetIO_Low
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSetIO_High
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[7b]"></a>CheckIsHaveMater</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, worklib.o(i.CheckIsHaveMater))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CheckIsHaveMater &rArr; GetGpIn &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[5b]"></a>CheckMotionStu</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, worklib.o(i.CheckMotionStu))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotionStatus
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotion
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RUNNING_LED
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisXMoveCheckDaoWei
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisDBSiGanChangeUpDown
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisDBSGSetCurrIO
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisBendMoveCheckDaoWei
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Rel
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Dis
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Abs
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_CheckMonStu
</UL>

<P><STRONG><a name="[7f]"></a>CheckOneIOStu</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, worklib.o(i.CheckOneIOStu))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CheckOneIOStu &rArr; GetGpIn &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
</UL>

<P><STRONG><a name="[79]"></a>CheckSetIO_High</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.CheckSetIO_High))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CheckSetIO_High &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIOAlarm
</UL>

<P><STRONG><a name="[7a]"></a>CheckSetIO_Low</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.CheckSetIO_Low))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIOAlarm
</UL>

<P><STRONG><a name="[64]"></a>DBSGMoveSetLen_SpeedBegin_Acc</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, worklib.o(i.DBSGMoveSetLen_SpeedBegin_Acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSG_DownUpTimesCount
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisXMoveCheckDaoWei
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisDBSiGanChangeUpDown
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisDBSGSetCurrIO
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>

<P><STRONG><a name="[80]"></a>DBSG_DownUpTimesCount</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, worklib.o(i.DBSG_DownUpTimesCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DBSG_DownUpTimesCount &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_int
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSGMoveSetLen_SpeedBegin_Acc
</UL>

<P><STRONG><a name="[5d]"></a>DelayMs</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, worklib.o(i.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotion
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RUNNING_LED
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPC_LinkData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIOAlarm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTwoGpOut
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneIOAfterCheckInIO
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneGpOut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_CheckDaoWei
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCmd_CheckDaoWei_Axis
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBendIOIn_OnOff
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisXMoveCheckDaoWei
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisBendMoveCheckDaoWei
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Set_Two
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Check_Two
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Check
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_DealyTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_CheckDaoWei
</UL>

<P><STRONG><a name="[84]"></a>EMAC_GetBufferSts</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_GetBufferSts))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_AllocTxBuff
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENETReadyRead
</UL>

<P><STRONG><a name="[94]"></a>EMAC_GetRxBuffer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_GetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENetGetReadbuff
</UL>

<P><STRONG><a name="[93]"></a>EMAC_GetRxFrameSize</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_GetRxFrameSize))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>EMAC_GetRxFrameStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_GetRxFrameStatus))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENETGetReadLength
</UL>

<P><STRONG><a name="[92]"></a>EMAC_GetTxFrameStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_GetTxFrameStatus))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>EMAC_Init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, lpc177x_8x_emac.o(i.EMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EMAC_Init &rArr; rx_descr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_descr_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEmacAddr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_descr_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_TxEnable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_RxEnable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_IntCmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EMAC
</UL>

<P><STRONG><a name="[8c]"></a>EMAC_IntCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_IntCmd))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[188]"></a>EMAC_Read_PHY</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_Read_PHY))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetMode
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Reset
</UL>

<P><STRONG><a name="[8e]"></a>EMAC_RxEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_RxEnable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[18a]"></a>EMAC_SetFullDuplexMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_SetFullDuplexMode))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UpdateStatus
</UL>

<P><STRONG><a name="[18b]"></a>EMAC_SetPHYSpeed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_SetPHYSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UpdateStatus
</UL>

<P><STRONG><a name="[8d]"></a>EMAC_TxEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_TxEnable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[95]"></a>EMAC_UpdateRxConsumeIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_UpdateRxConsumeIndex))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENETClearCount
</UL>

<P><STRONG><a name="[8f]"></a>EMAC_WritePacketBuffer</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lpc177x_8x_emac.o(i.EMAC_WritePacketBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EMAC_WritePacketBuffer &rArr; EMAC_AllocTxBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_AllocTxBuff
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENETSendData
</UL>

<P><STRONG><a name="[187]"></a>EMAC_Write_PHY</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.EMAC_Write_PHY))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetMode
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Reset
</UL>

<P><STRONG><a name="[90]"></a>EMC_PwrOn</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lpc177x_8x_emc.o(i.EMC_PwrOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EMC_PwrOn &rArr; CLKPWR_SetCLKDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetCLKDiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[198]"></a>EMC_SetStaMemoryParameter</STRONG> (Thumb, 234 bytes, Stack size 12 bytes, lpc177x_8x_emc.o(i.EMC_SetStaMemoryParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EMC_SetStaMemoryParameter
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[197]"></a>EMC_StaMemConfigEW</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(i.EMC_StaMemConfigEW))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[194]"></a>EMC_StaMemConfigMW</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(i.EMC_StaMemConfigMW))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[196]"></a>EMC_StaMemConfigPB</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(i.EMC_StaMemConfigPB))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[195]"></a>EMC_StaMemConfigPM</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lpc177x_8x_emc.o(i.EMC_StaMemConfigPM))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>

<P><STRONG><a name="[26]"></a>ENET_IRQHandler</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, lpc177x_8x_emac.o(i.ENET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ENET_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_UpdateRxConsumeIndex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetTxFrameStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetRxFrameStatus
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetRxFrameSize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetRxBuffer
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetBufferSts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>FCmd_CheckDaoWei_Axis</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, worklib.o(i.FCmd_CheckDaoWei_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FCmd_CheckDaoWei_Axis &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Rel
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Dis
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Abs
</UL>

<P><STRONG><a name="[97]"></a>Fill_MSCommand</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, usbhost_ms.o(i.Fill_MSCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE32U
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE32U
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[54]"></a>GPIO_ClearValue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc177x_8x_gpio.o(i.GPIO_ClearValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ClearValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpOut
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RUNNING_LED
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetGpOut
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc177x_8x_gpio.o(i.GPIO_Init))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>

<P><STRONG><a name="[9d]"></a>GPIO_SetDir</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lpc177x_8x_gpio.o(i.GPIO_SetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>

<P><STRONG><a name="[53]"></a>GPIO_SetValue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lpc177x_8x_gpio.o(i.GPIO_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpOut
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RUNNING_LED
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetGpOut
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>

<P><STRONG><a name="[9e]"></a>GetAxisPos</STRONG> (Thumb, 234 bytes, Stack size 80 bytes, worklib.o(i.GetAxisPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GetAxisPos &rArr; GetAxisPos_DBSG_X &rArr; GetPos_Abs_Axis &rArr; GetPosInt_Axis &rArr; GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosDev
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos_DBSG_X
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPos_Rel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPos_Abs
</UL>

<P><STRONG><a name="[65]"></a>GetAxisPos_DBSG_X</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, worklib.o(i.GetAxisPos_DBSG_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GetAxisPos_DBSG_X &rArr; GetPos_Abs_Axis &rArr; GetPosInt_Axis &rArr; GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPos_Abs_Axis
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>

<P><STRONG><a name="[a0]"></a>GetFpgaVerDev</STRONG> (Thumb, 48 bytes, Stack size 88 bytes, motion.o(i.GetFpgaVerDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetFpgaVerDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetFpgaVerDev
</UL>

<P><STRONG><a name="[5c]"></a>GetGpIn</STRONG> (Thumb, 48 bytes, Stack size 88 bytes, motion.o(i.GetGpIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetGpIn &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIOAlarm
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_CheckDaoWei
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCmd_CheckDaoWei_Axis
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOneIOStu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIsHaveMater
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFourIOStu
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisXMoveCheckDaoWei
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisBendMoveCheckDaoWei
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetGpIn
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Check_Two
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Check
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_CheckDaoWei
</UL>

<P><STRONG><a name="[a1]"></a>GetGpOut</STRONG> (Thumb, 130 bytes, Stack size 88 bytes, motion.o(i.GetGpOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetGpOut &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpOutIOStuSigle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetGpOut
</UL>

<P><STRONG><a name="[5f]"></a>GetGpOutIOStuSigle</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, worklib.o(i.GetGpOutIOStuSigle))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GetGpOutIOStuSigle &rArr; GetGpOut &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpOut
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisDBSiGanChangeUpDown
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisDBSGSetCurrIO
</UL>

<P><STRONG><a name="[7d]"></a>GetMotionStatus</STRONG> (Thumb, 48 bytes, Stack size 88 bytes, motion.o(i.GetMotionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetMotionStatus &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetMotionStatus
</UL>

<P><STRONG><a name="[82]"></a>GetPC_LinkData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.GetPC_LinkData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = GetPC_LinkData &rArr; I_LWIPStackGetData &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LwIP_Periodic_Handle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIPStackGetData
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[63]"></a>GetPosDev</STRONG> (Thumb, 102 bytes, Stack size 112 bytes, motion.o(i.GetPosDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosInt_Axis
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetPosDev
</UL>

<P><STRONG><a name="[a4]"></a>GetPosInt_Axis</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, worklib.o(i.GetPosInt_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GetPosInt_Axis &rArr; GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosDev
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPos_Abs_Axis
</UL>

<P><STRONG><a name="[a5]"></a>GetPos_Abs</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, worklib.o(i.GetPos_Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = GetPos_Abs &rArr; GetAxisPos &rArr; GetAxisPos_DBSG_X &rArr; GetPos_Abs_Axis &rArr; GetPosInt_Axis &rArr; GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetAxisPos_Abs
</UL>

<P><STRONG><a name="[9f]"></a>GetPos_Abs_Axis</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, worklib.o(i.GetPos_Abs_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GetPos_Abs_Axis &rArr; GetPosInt_Axis &rArr; GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosInt_Axis
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos_DBSG_X
</UL>

<P><STRONG><a name="[a6]"></a>GetPos_Rel</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, worklib.o(i.GetPos_Rel))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = GetPos_Rel &rArr; GetAxisPos &rArr; GetAxisPos_DBSG_X &rArr; GetPos_Abs_Axis &rArr; GetPosInt_Axis &rArr; GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAxisPos
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetAxisPos_Rel
</UL>

<P><STRONG><a name="[a7]"></a>GetSTM32VerDev</STRONG> (Thumb, 48 bytes, Stack size 88 bytes, motion.o(i.GetSTM32VerDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = GetSTM32VerDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetSTM32VerDev
</UL>

<P><STRONG><a name="[a8]"></a>GoHome_A</STRONG> (Thumb, 856 bytes, Stack size 88 bytes, worklib.o(i.GoHome_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = GoHome_A &rArr; SetLmtMode_Default &rArr; SetLmtMode &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosDev
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lmt_Disable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode_Default
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_CheckDaoWei
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOneIOStu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[ae]"></a>GoHome_CheckDaoWei</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, worklib.o(i.GoHome_CheckDaoWei))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = GoHome_CheckDaoWei &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
</UL>

<P><STRONG><a name="[b0]"></a>GoHome_R</STRONG> (Thumb, 1148 bytes, Stack size 96 bytes, worklib.o(i.GoHome_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = GoHome_R &rArr; SetLmtMode_Default &rArr; SetLmtMode &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosDev
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lmt_Disable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode_Default
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_CheckDaoWei
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOneIOStu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFourIOStu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[b1]"></a>GoHome_X</STRONG> (Thumb, 974 bytes, Stack size 72 bytes, worklib.o(i.GoHome_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GoHome_X &rArr; SetLmtMode_Default &rArr; SetLmtMode &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosDev
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lmt_Disable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode_Default
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTwoGpOut
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_CheckDaoWei
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOneIOStu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[b3]"></a>GoHome_Y</STRONG> (Thumb, 840 bytes, Stack size 72 bytes, worklib.o(i.GoHome_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GoHome_Y &rArr; SetLmtMode_Default &rArr; SetLmtMode &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosDev
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lmt_Disable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode_Default
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOneIOStu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[b4]"></a>GoHome_Z</STRONG> (Thumb, 826 bytes, Stack size 72 bytes, worklib.o(i.GoHome_Z))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GoHome_Z &rArr; SetLmtMode_Default &rArr; SetLmtMode &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosDev
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lmt_Disable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode_Default
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckOneIOStu
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[b5]"></a>HW_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, hw_init.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = HW_Init &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDRAMInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EXTERN_BUS_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>HardWare_Init_SDKBus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, i_extern_bus.o(i.HardWare_Init_SDKBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HardWare_Init_SDKBus &rArr; StaticMem_Init &rArr; EMC_PwrOn &rArr; CLKPWR_SetCLKDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EXTERN_BUS_Init
</UL>

<P><STRONG><a name="[bb]"></a>HardWare_UARTInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, i_uart.o(i.HardWare_UARTInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HardWare_UARTInit &rArr; UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[c5]"></a>Host_CtrlInit</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.Host_CtrlInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Host_CtrlInit &rArr; Host_DelayMS &rArr; Host_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TDInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_HCCAInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EDInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[ca]"></a>Host_CtrlRecv</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, lpc177x_8x_usbhost.o(i.Host_CtrlRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Host_CtrlRecv &rArr; Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[cd]"></a>Host_CtrlSend</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, lpc177x_8x_usbhost.o(i.Host_CtrlSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Host_CtrlSend &rArr; Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[c9]"></a>Host_DelayMS</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.Host_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_DelayMS &rArr; Host_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlInit
</UL>

<P><STRONG><a name="[ce]"></a>Host_DelayUS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.Host_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>

<P><STRONG><a name="[c6]"></a>Host_EDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_EDInit))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlInit
</UL>

<P><STRONG><a name="[cf]"></a>Host_EnumDev</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, lpc177x_8x_usbhost.o(i.Host_EnumDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Host_EnumDev &rArr; Host_CtrlSend &rArr; Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ParseConfiguration
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
</UL>

<P><STRONG><a name="[cb]"></a>Host_FillSetup</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lpc177x_8x_usbhost.o(i.Host_FillSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>

<P><STRONG><a name="[1a6]"></a>Host_GetDeviceType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_GetDeviceType))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
</UL>

<P><STRONG><a name="[c8]"></a>Host_HCCAInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_HCCAInit))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlInit
</UL>

<P><STRONG><a name="[d3]"></a>Host_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.Host_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Host_Init &rArr; Host_CtrlInit &rArr; Host_DelayMS &rArr; Host_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
</UL>

<P><STRONG><a name="[d1]"></a>Host_ParseConfiguration</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, lpc177x_8x_usbhost.o(i.Host_ParseConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Host_ParseConfiguration &rArr; ReadLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[cc]"></a>Host_ProcessTD</STRONG> (Thumb, 146 bytes, Stack size 36 bytes, lpc177x_8x_usbhost.o(i.Host_ProcessTD))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WDHWait
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>

<P><STRONG><a name="[c7]"></a>Host_TDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_TDInit))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlInit
</UL>

<P><STRONG><a name="[d4]"></a>Host_WDHWait</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.Host_WDHWait))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>

<P><STRONG><a name="[d5]"></a>I2C_Cmd</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lpc177x_8x_i2c.o(i.I2C_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_Init
</UL>

<P><STRONG><a name="[d7]"></a>I2C_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lpc177x_8x_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_Init
</UL>

<P><STRONG><a name="[de]"></a>I2C_IntCmd</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc177x_8x_i2c.o(i.I2C_IntCmd))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[d8]"></a>I2C_MasterHanleStates</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, lpc177x_8x_i2c.o(i.I2C_MasterHanleStates))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_MasterHanleStates
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendByte
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetPointer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetByte
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[dc]"></a>I2C_MasterTransferData</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lpc177x_8x_i2c.o(i.I2C_MasterTransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_MasterTransferData &rArr; I2C_MasterHanleStates
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHanleStates
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_WR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_RD
</UL>

<P><STRONG><a name="[b6]"></a>I_EEPROM_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i_eeprom.o(i.I_EEPROM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I_EEPROM_Init &rArr; PINSEL_ConfigPin
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[e2]"></a>I_ENETClearCount</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i_enet.o(i.I_ENETClearCount))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_UpdateRxConsumeIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[e3]"></a>I_ENETGetReadLength</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i_enet.o(i.I_ENETGetReadLength))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetRxFrameStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[e4]"></a>I_ENETReadyRead</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, i_enet.o(i.I_ENETReadyRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I_ENETReadyRead
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetBufferSts
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIPStackGetData
</UL>

<P><STRONG><a name="[e5]"></a>I_ENETSendData</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, i_enet.o(i.I_ENETSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I_ENETSendData &rArr; EMAC_WritePacketBuffer &rArr; EMAC_AllocTxBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WritePacketBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[e6]"></a>I_ENET_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i_enet.o(i.I_ENET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I_ENET_Init &rArr; Init_EMAC &rArr; EMAC_Init &rArr; rx_descr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EMAC
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[e8]"></a>I_ENetGetReadbuff</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i_enet.o(i.I_ENetGetReadbuff))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[b9]"></a>I_EXTERN_BUS_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i_extern_bus.o(i.I_EXTERN_BUS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I_EXTERN_BUS_Init &rArr; HardWare_Init_SDKBus &rArr; StaticMem_Init &rArr; EMC_PwrOn &rArr; CLKPWR_SetCLKDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init_SDKBus
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[ba]"></a>I_GPIO_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i_gpio.o(i.I_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I_GPIO_Init &rArr; Main_GPIO_Init &rArr; PINSEL_ConfigPin
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[a2]"></a>I_LWIPStackGetData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i_lwip.o(i.I_LWIPStackGetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = I_LWIPStackGetData &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENETReadyRead
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPC_LinkData
</UL>

<P><STRONG><a name="[b7]"></a>I_LWIP_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, i_lwip.o(i.I_LWIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = I_LWIP_Init &rArr; netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UDP_Server
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SYSTICK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[a3]"></a>I_LwIP_Periodic_Handle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, i_lwip.o(i.I_LwIP_Periodic_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I_LwIP_Periodic_Handle &rArr; etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPC_LinkData
</UL>

<P><STRONG><a name="[b8]"></a>I_SDRAMInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i_sdram.o(i.I_SDRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I_SDRAMInit &rArr; SDRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[eb]"></a>I_SYSTICK_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i_systick.o(i.I_SYSTICK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I_SYSTICK_Init &rArr; SYSTICK_InternalInit &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_InternalInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_IntCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[204]"></a>InitAllStu</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, main.o(i.InitAllStu))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>InitLink</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motion.o(i.InitLink))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkRst
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[203]"></a>InitModbusReg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modbusreg.o(i.InitModbusReg))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>Init_UDP_Server</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i_udp.o(i.Init_UDP_Server))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Init_UDP_Server &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[fb]"></a>LinkConnect</STRONG> (Thumb, 36 bytes, Stack size 80 bytes, motion.o(i.LinkConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LinkConnect &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>Link_PC_All_stop</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_All_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Link_PC_All_stop &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufStop
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[fd]"></a>Link_PC_All_stop_Pmove</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_All_stop_Pmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Link_PC_All_stop_Pmove &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[184]"></a>Link_PC_CheckCurrIsInApp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_CheckCurrIsInApp))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[183]"></a>Link_PC_CheckCurrIsInBoot</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_CheckCurrIsInBoot))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[160]"></a>Link_PC_CheckIO_GetStu</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_CheckIO_GetStu))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[15e]"></a>Link_PC_CheckIO_SetAlarm</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_CheckIO_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Link_PC_CheckIO_SetAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[15f]"></a>Link_PC_CheckIO_SetAxisLmt</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_CheckIO_SetAxisLmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Link_PC_CheckIO_SetAxisLmt
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[15d]"></a>Link_PC_ClearHaveAlarm</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_ClearHaveAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[fe]"></a>Link_PC_Dec_stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_Dec_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Link_PC_Dec_stop &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[ff]"></a>Link_PC_EMCStopBtn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_EMCStopBtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Link_PC_EMCStopBtn &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[164]"></a>Link_PC_GetAxisHomeStu</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetAxisHomeStu))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[176]"></a>Link_PC_GetAxisOrgPos</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetAxisOrgPos))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[100]"></a>Link_PC_GetAxisPos_Abs</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, pc_link_udp.o(i.Link_PC_GetAxisPos_Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Link_PC_GetAxisPos_Abs &rArr; GetPos_Abs &rArr; GetAxisPos &rArr; GetAxisPos_DBSG_X &rArr; GetPos_Abs_Axis &rArr; GetPosInt_Axis &rArr; GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPos_Abs
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[101]"></a>Link_PC_GetAxisPos_Rel</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, pc_link_udp.o(i.Link_PC_GetAxisPos_Rel))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Link_PC_GetAxisPos_Rel &rArr; GetPos_Rel &rArr; GetAxisPos &rArr; GetAxisPos_DBSG_X &rArr; GetPos_Abs_Axis &rArr; GetPosInt_Axis &rArr; GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPos_Rel
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[169]"></a>Link_PC_GetCheckIOErrPinVal</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_GetCheckIOErrPinVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Link_PC_GetCheckIOErrPinVal
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[161]"></a>Link_PC_GetCurrWorkInfo</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetCurrWorkInfo))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[16c]"></a>Link_PC_GetCurrWorkStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetCurrWorkStatus))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[17f]"></a>Link_PC_GetDBSGIO_UpDownStu</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetDBSGIO_UpDownStu))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[163]"></a>Link_PC_GetFileWorkEndStu</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetFileWorkEndStu))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[102]"></a>Link_PC_GetFpgaVerDev</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_GetFpgaVerDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Link_PC_GetFpgaVerDev &rArr; GetFpgaVerDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFpgaVerDev
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[103]"></a>Link_PC_GetGpIn</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_GetGpIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Link_PC_GetGpIn &rArr; GetGpIn &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[104]"></a>Link_PC_GetGpOut</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_GetGpOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Link_PC_GetGpOut &rArr; GetGpOut &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpOut
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[105]"></a>Link_PC_GetMotionStatus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_GetMotionStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Link_PC_GetMotionStatus &rArr; GetMotionStatus &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotionStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[106]"></a>Link_PC_GetPosDev</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, pc_link_udp.o(i.Link_PC_GetPosDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Link_PC_GetPosDev &rArr; GetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosDev
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[107]"></a>Link_PC_GetSTM32VerDev</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_GetSTM32VerDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Link_PC_GetSTM32VerDev &rArr; GetSTM32VerDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSTM32VerDev
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[17c]"></a>Link_PC_GetWorkIndex</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetWorkIndex))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[178]"></a>Link_PC_GetmCWInfoVal</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetmCWInfoVal))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[179]"></a>Link_PC_GetmCurrAlarmCheStu</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetmCurrAlarmCheStu))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[16b]"></a>Link_PC_GetnCurrDBSiGangDC</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetnCurrDBSiGangDC))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[17d]"></a>Link_PC_GetpreCutDownMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_GetpreCutDownMode))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[173]"></a>Link_PC_GoHome_A</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, pc_link_udp.o(i.Link_PC_GoHome_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Link_PC_GoHome_A
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[172]"></a>Link_PC_GoHome_R</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, pc_link_udp.o(i.Link_PC_GoHome_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Link_PC_GoHome_R
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[16f]"></a>Link_PC_GoHome_X</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, pc_link_udp.o(i.Link_PC_GoHome_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Link_PC_GoHome_X
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[170]"></a>Link_PC_GoHome_Y</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, pc_link_udp.o(i.Link_PC_GoHome_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Link_PC_GoHome_Y
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[171]"></a>Link_PC_GoHome_Z</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, pc_link_udp.o(i.Link_PC_GoHome_Z))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Link_PC_GoHome_Z
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[202]"></a>Link_PC_InitLinkPC</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_InitLinkPC))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>Link_PC_IsCkeckHaveMeter</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_IsCkeckHaveMeter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Link_PC_IsCkeckHaveMeter
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[108]"></a>Link_PC_Lmt_Disable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_Lmt_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Link_PC_Lmt_Disable &rArr; Lmt_Disable &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lmt_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[109]"></a>Link_PC_PMove</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pc_link_udp.o(i.Link_PC_PMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Link_PC_PMove &rArr; Pmove &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[10a]"></a>Link_PC_PMove_Mode</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, pc_link_udp.o(i.Link_PC_PMove_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = Link_PC_PMove_Mode &rArr; AxisMove_Distance &rArr; AxisMove &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_Distance
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_RelPos
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_AbsPos
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[10b]"></a>Link_PC_PMove_Mode_SpeedBeiginAcc</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, pc_link_udp.o(i.Link_PC_PMove_Mode_SpeedBeiginAcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Link_PC_PMove_Mode_SpeedBeiginAcc &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_Distance_SpeedBegin_Acc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_RelPos_SpeedBegin_Acc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_AbsPos_SpeedBegin_Acc
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[10c]"></a>Link_PC_PauseBtn</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, pc_link_udp.o(i.Link_PC_PauseBtn))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Link_PC_PauseBtn &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotion
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[17b]"></a>Link_PC_ReStartBtn</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_ReStartBtn))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[10d]"></a>Link_PC_Recive_UDP</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_Recive_UDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Link_PC_Recive_UDP &rArr; MyPCLink &rArr; MyPCCommand &rArr; Link_PC_PMove_Mode_SpeedBeiginAcc &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_TX_DATA
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCLink
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_server_rev
</UL>

<P><STRONG><a name="[16e]"></a>Link_PC_RunFCmdFile_Pause</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, pc_link_udp.o(i.Link_PC_RunFCmdFile_Pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Link_PC_RunFCmdFile_Pause
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[168]"></a>Link_PC_RunSendFCmdFile</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, pc_link_udp.o(i.Link_PC_RunSendFCmdFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Link_PC_RunSendFCmdFile
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[167]"></a>Link_PC_SendFCmdFileDataEnd</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, pc_link_udp.o(i.Link_PC_SendFCmdFileDataEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Link_PC_SendFCmdFileDataEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[165]"></a>Link_PC_SendFCmdFileSatrt</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_SendFCmdFileSatrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Link_PC_SendFCmdFileSatrt
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[174]"></a>Link_PC_SetAxisHomeSucc</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_SetAxisHomeSucc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Link_PC_SetAxisHomeSucc
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[110]"></a>Link_PC_SetAxisOrgPos</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_SetAxisOrgPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Link_PC_SetAxisOrgPos
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAxisOrg_PC
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[112]"></a>Link_PC_SetAxisOrgPosAll</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, pc_link_udp.o(i.Link_PC_SetAxisOrgPosAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Link_PC_SetAxisOrgPosAll &rArr; SetAxisOrgAll_PC
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAxisOrgAll_PC
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[162]"></a>Link_PC_SetCurrWorkInfo</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_SetCurrWorkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Link_PC_SetCurrWorkInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[181]"></a>Link_PC_SetCurrWorkStatus</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_SetCurrWorkStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Link_PC_SetCurrWorkStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[180]"></a>Link_PC_SetDBSGIO_UpDownStu</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_SetDBSGIO_UpDownStu))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[115]"></a>Link_PC_SetGpOut</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_SetGpOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Link_PC_SetGpOut &rArr; SetGpOut &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpOut
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[17a]"></a>Link_PC_SetIsCheckSoftLmt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_SetIsCheckSoftLmt))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[182]"></a>Link_PC_SetIsCheckSuccessHome</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_SetIsCheckSuccessHome))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Link_PC_SetIsCheckSuccessHome
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[117]"></a>Link_PC_SetLmtMode</STRONG> (Thumb, 156 bytes, Stack size 96 bytes, pc_link_udp.o(i.Link_PC_SetLmtMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Link_PC_SetLmtMode &rArr; SetLmtMode &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[119]"></a>Link_PC_SetMotionDir</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_SetMotionDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Link_PC_SetMotionDir &rArr; SetMotionDir &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotionDir
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[11b]"></a>Link_PC_SetPosDev</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_SetPosDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Link_PC_SetPosDev &rArr; SetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosDev
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[16a]"></a>Link_PC_SetnCurrDBSiGangDC</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_SetnCurrDBSiGangDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Link_PC_SetnCurrDBSiGangDC
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[17e]"></a>Link_PC_SetpreCutDownMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_SetpreCutDownMode))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[175]"></a>Link_PC_StopFCmdRunFile</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pc_link_udp.o(i.Link_PC_StopFCmdRunFile))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[11c]"></a>Link_PC_Sudden_stop</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_Sudden_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Link_PC_Sudden_stop &rArr; sudden_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sudden_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[177]"></a>Link_PC_TestFloatDoubleVal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_TestFloatDoubleVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Link_PC_TestFloatDoubleVal
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[11e]"></a>Link_PC_UpdateProgram</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_UpdateProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Link_PC_UpdateProgram &rArr; WhirteData24c02Flash_Byte &rArr; I_EEPROM_WR &rArr; I2C_MasterTransferData &rArr; I2C_MasterHanleStates
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhirteData24c02Flash_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[120]"></a>Link_PC_UserReadSoftDogNum</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pc_link_udp.o(i.Link_PC_UserReadSoftDogNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Link_PC_UserReadSoftDogNum &rArr; ReadData24c02Flash_Bytes &rArr; I_EEPROM_RD &rArr; I2C_MasterTransferData &rArr; I2C_MasterHanleStates
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData24c02Flash_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[166]"></a>Link_PC_UserSendFileData</STRONG> (Thumb, 170 bytes, Stack size 36 bytes, pc_link_udp.o(i.Link_PC_UserSendFileData))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Link_PC_UserSendFileData
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[122]"></a>Link_PC_UserSendParamData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_UserSendParamData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Link_PC_UserSendParamData
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcuMmToPulse
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[124]"></a>Link_PC_UserWriteSoftDogNum</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pc_link_udp.o(i.Link_PC_UserWriteSoftDogNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Link_PC_UserWriteSoftDogNum &rArr; WhirteData24c02Flash_Long &rArr; I_EEPROM_WR &rArr; I2C_MasterTransferData &rArr; I2C_MasterHanleStates
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhirteData24c02Flash_Long
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
</UL>

<P><STRONG><a name="[aa]"></a>Lmt_Disable</STRONG> (Thumb, 36 bytes, Stack size 80 bytes, motion.o(i.Lmt_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Lmt_Disable &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_Lmt_Disable
</UL>

<P><STRONG><a name="[126]"></a>MCI_Acmd_SendBusWidth</STRONG> (Thumb, 96 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Acmd_SendBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendACMD
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBusWidth
</UL>

<P><STRONG><a name="[12a]"></a>MCI_Acmd_SendOpCond</STRONG> (Thumb, 102 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Acmd_SendOpCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MCI_Acmd_SendOpCond &rArr; MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetOutputMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendACMD
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[12c]"></a>MCI_CardInit</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, lpc177x_8x_mci.o(i.MCI_CardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MCI_CardInit &rArr; MCI_Acmd_SendOpCond &rArr; MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetOutputMode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendOpCond
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendIfCond
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardReset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
</UL>

<P><STRONG><a name="[12d]"></a>MCI_CardReset</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_CardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCI_CardReset &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[127]"></a>MCI_CheckStatus</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_CheckStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBlockLen
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCSD
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_WriteBlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SelectCard
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_ReadBlock
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>

<P><STRONG><a name="[140]"></a>MCI_CmdProcess</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_CmdProcess))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>MCI_CmdResp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lpc177x_8x_mci.o(i.MCI_CmdResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SendCmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCardAddress
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBlockLen
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardStatus
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCSD
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCID
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_WriteBlock
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendOpCond
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendIfCond
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SendACMD
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SelectCard
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_ReadBlock
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>

<P><STRONG><a name="[133]"></a>MCI_Cmd_ReadBlock</STRONG> (Thumb, 122 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
</UL>

<P><STRONG><a name="[134]"></a>MCI_Cmd_SelectCard</STRONG> (Thumb, 180 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SelectCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MCI_Cmd_SelectCard &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[128]"></a>MCI_Cmd_SendACMD</STRONG> (Thumb, 98 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SendACMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>

<P><STRONG><a name="[12e]"></a>MCI_Cmd_SendIfCond</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SendIfCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MCI_Cmd_SendIfCond &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[12f]"></a>MCI_Cmd_SendOpCond</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_SendOpCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCI_Cmd_SendOpCond &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>

<P><STRONG><a name="[135]"></a>MCI_Cmd_StopTransmission</STRONG> (Thumb, 122 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_StopTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MCI_Cmd_StopTransmission &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Read
</UL>

<P><STRONG><a name="[136]"></a>MCI_Cmd_WriteBlock</STRONG> (Thumb, 122 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_Cmd_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
</UL>

<P><STRONG><a name="[137]"></a>MCI_DATA_END_InterruptService</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, lpc177x_8x_mci.o(i.MCI_DATA_END_InterruptService))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MCI_DATA_END_InterruptService
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_TXDisable
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_RXDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>MCI_DataErrorProcess</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_DataErrorProcess))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>MCI_FIFOInterruptService</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc177x_8x_mci.o(i.MCI_FIFOInterruptService))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MCI_FIFOInterruptService &rArr; MCI_WriteFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteFifo
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>MCI_GetCID</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_GetCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCI_GetCID &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[13e]"></a>MCI_GetCSD</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_GetCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MCI_GetCSD &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[207]"></a>MCI_GetCardAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetCardAddress))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[131]"></a>MCI_GetCardStatus</STRONG> (Thumb, 100 bytes, Stack size 60 bytes, lpc177x_8x_mci.o(i.MCI_GetCardStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>

<P><STRONG><a name="[206]"></a>MCI_GetCardType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetCardType))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[132]"></a>MCI_GetCmdResp</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, lpc177x_8x_mci.o(i.MCI_GetCmdResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCI_GetCmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>

<P><STRONG><a name="[14b]"></a>MCI_GetDataXferEndState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetDataXferEndState))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Read
</UL>

<P><STRONG><a name="[14c]"></a>MCI_GetXferErrState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_GetXferErrState))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Write
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Read
</UL>

<P><STRONG><a name="[27]"></a>MCI_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MCI_IRQHandler &rArr; MCI_FIFOInterruptService &rArr; MCI_WriteFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FIFOInterruptService
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DataErrorProcess
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DATA_END_InterruptService
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>MCI_Init</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = MCI_Init &rArr; MCI_CardInit &rArr; MCI_Acmd_SendOpCond &rArr; MCI_Cmd_SendACMD &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Set_MCIClock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>

<P><STRONG><a name="[139]"></a>MCI_RXDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_RXDisable))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DATA_END_InterruptService
</UL>

<P><STRONG><a name="[144]"></a>MCI_RXEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_RXEnable))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
</UL>

<P><STRONG><a name="[143]"></a>MCI_ReadBlock</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lpc177x_8x_mci.o(i.MCI_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MCI_ReadBlock &rArr; MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_RXEnable
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_ReadBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Read
</UL>

<P><STRONG><a name="[13c]"></a>MCI_ReadFifo</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lpc177x_8x_mci.o(i.MCI_ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCI_ReadFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FIFOInterruptService
</UL>

<P><STRONG><a name="[130]"></a>MCI_SendCmd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lpc177x_8x_mci.o(i.MCI_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MCI_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardReset
</UL>

<P><STRONG><a name="[145]"></a>MCI_SetBlockLen</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_SetBlockLen))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MCI_SetBlockLen &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[146]"></a>MCI_SetBusWidth</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lpc177x_8x_mci.o(i.MCI_SetBusWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendBusWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[147]"></a>MCI_SetCardAddress</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, lpc177x_8x_mci.o(i.MCI_SetCardAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCI_SetCardAddress &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetOutputMode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CmdResp
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[12b]"></a>MCI_SetOutputMode</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_SetOutputMode))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCardAddress
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CardInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Acmd_SendOpCond
</UL>

<P><STRONG><a name="[142]"></a>MCI_Set_MCIClock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lpc177x_8x_mci.o(i.MCI_Set_MCIClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCI_Set_MCIClock
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[138]"></a>MCI_TXDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_TXDisable))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_DATA_END_InterruptService
</UL>

<P><STRONG><a name="[149]"></a>MCI_TXEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_mci.o(i.MCI_TXEnable))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
</UL>

<P><STRONG><a name="[148]"></a>MCI_WriteBlock</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lpc177x_8x_mci.o(i.MCI_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_TXEnable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_WriteBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_CheckStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Write
</UL>

<P><STRONG><a name="[13b]"></a>MCI_WriteFifo</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lpc177x_8x_mci.o(i.MCI_WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MCI_WriteFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_FIFOInterruptService
</UL>

<P><STRONG><a name="[14a]"></a>MMC_Read</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, diskio.o(i.MMC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MMC_Read &rArr; MCI_ReadBlock &rArr; MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_ReadBlock
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetXferErrState
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetDataXferEndState
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[14d]"></a>MMC_Write</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, diskio.o(i.MMC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_WriteBlock
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetXferErrState
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetDataXferEndState
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_StopTransmission
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[14e]"></a>MMC_disk_initialize</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(i.MMC_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MMC_disk_initialize &rArr; mci_read_configuration &rArr; MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[150]"></a>MS_BulkRecv</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, usbhost_ms.o(i.MS_BulkRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_read
</UL>

<P><STRONG><a name="[151]"></a>MS_BulkSend</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, usbhost_ms.o(i.MS_BulkSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_write
</UL>

<P><STRONG><a name="[152]"></a>MS_GetMaxLUN</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_GetMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[153]"></a>MS_GetSenseInfo</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_GetSenseInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MS_GetSenseInfo &rArr; Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[154]"></a>MS_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, usbhost_ms.o(i.MS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MS_Init &rArr; MS_ReadCapacity &rArr; Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
</UL>

<P><STRONG><a name="[157]"></a>MS_Inquire</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbhost_ms.o(i.MS_Inquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_Inquire &rArr; Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[156]"></a>MS_ReadCapacity</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, usbhost_ms.o(i.MS_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_ReadCapacity &rArr; Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBE32U
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[155]"></a>MS_TestUnitReady</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbhost_ms.o(i.MS_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MS_TestUnitReady &rArr; Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[69]"></a>MoveBendModeCCW_CW</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, worklib.o(i.MoveBendModeCCW_CW))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = MoveBendModeCCW_CW &rArr; AxisBendMoveCheckDaoWei &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneGpOut
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBendIOIn_OnOff
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisBendMoveCheckDaoWei
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
</UL>

<P><STRONG><a name="[15b]"></a>MyCRC16</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pc_link_udp.o(i.MyCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MyCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCLink
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCmdReply
</UL>

<P><STRONG><a name="[15a]"></a>MyCmdReply</STRONG> (Thumb, 272 bytes, Stack size 36 bytes, pc_link_udp.o(i.MyCmdReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MyCmdReply &rArr; MyCRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCLink
</UL>

<P><STRONG><a name="[15c]"></a>MyPCCommand</STRONG> (Thumb, 622 bytes, Stack size 8 bytes, pc_link_udp.o(i.MyPCCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = MyPCCommand &rArr; Link_PC_PMove_Mode_SpeedBeiginAcc &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_UserWriteSoftDogNum
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_UserSendParamData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_UserSendFileData
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_UserReadSoftDogNum
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_UpdateProgram
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_TestFloatDoubleVal
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_Sudden_stop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_StopFCmdRunFile
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetpreCutDownMode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetnCurrDBSiGangDC
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetPosDev
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetMotionDir
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetLmtMode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetIsCheckSuccessHome
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetIsCheckSoftLmt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetGpOut
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetDBSGIO_UpDownStu
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetCurrWorkStatus
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetCurrWorkInfo
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetAxisOrgPosAll
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetAxisOrgPos
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetAxisHomeSucc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SendFCmdFileSatrt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SendFCmdFileDataEnd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_RunSendFCmdFile
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_RunFCmdFile_Pause
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_ReStartBtn
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PauseBtn
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PMove_Mode_SpeedBeiginAcc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PMove_Mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PMove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_Lmt_Disable
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_IsCkeckHaveMeter
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GoHome_Z
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GoHome_Y
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GoHome_X
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GoHome_R
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GoHome_A
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetpreCutDownMode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetnCurrDBSiGangDC
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetmCurrAlarmCheStu
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetmCWInfoVal
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetWorkIndex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetSTM32VerDev
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetPosDev
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetMotionStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetGpOut
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetGpIn
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetFpgaVerDev
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetFileWorkEndStu
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetDBSGIO_UpDownStu
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetCurrWorkStatus
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetCurrWorkInfo
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetCheckIOErrPinVal
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetAxisPos_Rel
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetAxisPos_Abs
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetAxisOrgPos
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_GetAxisHomeStu
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_EMCStopBtn
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_Dec_stop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_ClearHaveAlarm
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_CheckIO_SetAxisLmt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_CheckIO_SetAlarm
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_CheckIO_GetStu
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_CheckCurrIsInBoot
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_CheckCurrIsInApp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_All_stop_Pmove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_All_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCLink
</UL>

<P><STRONG><a name="[10e]"></a>MyPCLink</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pc_link_udp.o(i.MyPCLink))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = MyPCLink &rArr; MyPCCommand &rArr; Link_PC_PMove_Mode_SpeedBeiginAcc &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyScanRxData
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCCommand
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCmdReply
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_Recive_UDP
</UL>

<P><STRONG><a name="[185]"></a>MyScanRxData</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pc_link_udp.o(i.MyScanRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MyScanRxData
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyPCLink
</UL>

<P><STRONG><a name="[37]"></a>PHY_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, phylan.o(i.PHY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PHY_Init &rArr; PHY_SetMode &rArr; PHY_UpdateStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetMode
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_enet.o(i.Init_EMAC)
</UL>
<P><STRONG><a name="[38]"></a>PHY_Reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, phylan.o(i.PHY_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PHY_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Write_PHY
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Read_PHY
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_enet.o(i.Init_EMAC)
</UL>
<P><STRONG><a name="[186]"></a>PHY_SetMode</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, phylan.o(i.PHY_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PHY_SetMode &rArr; PHY_UpdateStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Write_PHY
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Read_PHY
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UpdateStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[189]"></a>PHY_UpdateStatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, phylan.o(i.PHY_UpdateStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PHY_UpdateStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetPHYSpeed
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetFullDuplexMode
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetMode
</UL>

<P><STRONG><a name="[bf]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lpc177x_8x_pinsel.o(i.PINSEL_ConfigPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PINSEL_ConfigPin
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_GetPinType
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_GetPointer
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StaticMem_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GPIO_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_EMAC
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
</UL>

<P><STRONG><a name="[18c]"></a>PINSEL_GetPinType</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, lpc177x_8x_pinsel.o(i.PINSEL_GetPinType))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[7c]"></a>PauseMotion</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, worklib.o(i.PauseMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PauseMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIsHaveMater
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PauseBtn
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRel
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDis
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Rel
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Dis
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Abs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbs
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Check_Two
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Check
</UL>

<P><STRONG><a name="[5a]"></a>Pmove</STRONG> (Thumb, 48 bytes, Stack size 104 bytes, motion.o(i.Pmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Pmove &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisXMoveCheckDaoWei
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_SpeedBegin_Acc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisBendMoveCheckDaoWei
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PMove
</UL>

<P><STRONG><a name="[158]"></a>ReadBE32U</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.ReadBE32U))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
</UL>

<P><STRONG><a name="[121]"></a>ReadData24c02Flash_Bytes</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i_eeprom.o(i.ReadData24c02Flash_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReadData24c02Flash_Bytes &rArr; I_EEPROM_RD &rArr; I2C_MasterTransferData &rArr; I2C_MasterHanleStates
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_RD
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_UserReadSoftDogNum
</UL>

<P><STRONG><a name="[d0]"></a>ReadLE16U</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lpc177x_8x_usbhost.o(i.ReadLE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ParseConfiguration
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[199]"></a>SYSTICK_ClearCounterFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_systick.o(i.SYSTICK_ClearCounterFlag))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f5]"></a>SYSTICK_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_systick.o(i.SYSTICK_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SYSTICK_Init
</UL>

<P><STRONG><a name="[f4]"></a>SYSTICK_IntCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_systick.o(i.SYSTICK_IntCmd))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SYSTICK_Init
</UL>

<P><STRONG><a name="[f3]"></a>SYSTICK_InternalInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lpc177x_8x_systick.o(i.SYSTICK_InternalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SYSTICK_InternalInit &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SYSTICK_Init
</UL>

<P><STRONG><a name="[73]"></a>SendCmd</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, motion.o(i.SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkRst
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkMsg
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SetSdkAck
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SDKW_Fifo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_SDKR_Fifo
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_GetSdkRxe
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_GetSdkMsg
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddMsgByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sudden_stop
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosDev
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotionDir
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpOut
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pmove
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lmt_Disable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkConnect
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSTM32VerDev
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPosDev
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMotionStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpOut
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFpgaVerDev
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufStop
</UL>

<P><STRONG><a name="[114]"></a>SetAxisOrgAll_PC</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, worklib.o(i.SetAxisOrgAll_PC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetAxisOrgAll_PC
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetAxisOrgPosAll
</UL>

<P><STRONG><a name="[111]"></a>SetAxisOrg_PC</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, worklib.o(i.SetAxisOrg_PC))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetAxisOrgPos
</UL>

<P><STRONG><a name="[116]"></a>SetGpOut</STRONG> (Thumb, 138 bytes, Stack size 80 bytes, motion.o(i.SetGpOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetGpOut &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTwoGpOut
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneIOAfterCheckInIO
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOneGpOut
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetGpOut
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Set_Two
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Set
</UL>

<P><STRONG><a name="[118]"></a>SetLmtMode</STRONG> (Thumb, 138 bytes, Stack size 128 bytes, motion.o(i.SetLmtMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SetLmtMode &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode_Default
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetLmtMode
</UL>

<P><STRONG><a name="[a9]"></a>SetLmtMode_Default</STRONG> (Thumb, 82 bytes, Stack size 72 bytes, parameter.o(i.SetLmtMode_Default))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SetLmtMode_Default &rArr; SetLmtMode &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>SetMotionDir</STRONG> (Thumb, 42 bytes, Stack size 80 bytes, motion.o(i.SetMotionDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetMotionDir &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetMotionDir
</UL>

<P><STRONG><a name="[159]"></a>SetOneGpOut</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, worklib.o(i.SetOneGpOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetOneGpOut &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpOut
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveBendModeCCW_CW
</UL>

<P><STRONG><a name="[60]"></a>SetOneIOAfterCheckInIO</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, worklib.o(i.SetOneIOAfterCheckInIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SetOneIOAfterCheckInIO &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpOut
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisDBSiGanChangeUpDown
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisDBSGSetCurrIO
</UL>

<P><STRONG><a name="[af]"></a>SetPosDev</STRONG> (Thumb, 48 bytes, Stack size 88 bytes, motion.o(i.SetPosDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SetPosDev &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_SetPosDev
</UL>

<P><STRONG><a name="[b2]"></a>SetTwoGpOut</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, worklib.o(i.SetTwoGpOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetTwoGpOut &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpOut
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
</UL>

<P><STRONG><a name="[be]"></a>StaticMem_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, lpc177x_8x_emc.o(i.StaticMem_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = StaticMem_Init &rArr; EMC_PwrOn &rArr; CLKPWR_SetCLKDiv &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigPM
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigPB
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigMW
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_StaMemConfigEW
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_SetStaMemoryParameter
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMC_PwrOn
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_Init_SDKBus
</UL>

<P><STRONG><a name="[7e]"></a>StopMotion</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, worklib.o(i.StopMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSetIO_Low
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSetIO_High
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_PauseBtn
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_EMCStopBtn
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Check_Two
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Check
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, i_systick.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ClearCounterFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 314 bytes, Stack size 20 bytes, system_lpc177x_8x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_SetCLKDiv
</UL>

<P><STRONG><a name="[201]"></a>SystemInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, system_lpc177x_8x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i_timer.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetIntStatus
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearIntPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>TIM_ClearIntPending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(i.TIM_ClearIntPending))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>TIM_GetIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_timer.o(i.TIM_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[19c]"></a>TaskStart</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, main.o(i.TaskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = TaskStart &rArr; WorkRunFile &rArr; Work_FCmd_MoveRelZ &rArr; Work_FCmd_MoveRel &rArr; AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_Distance_SpeedBegin_Acc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_Distance
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, i_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, i_uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetLineStatus
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetIntId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>UART_ConfigStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
</UL>

<P><STRONG><a name="[c3]"></a>UART_FIFOConfig</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_FIFOConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
</UL>

<P><STRONG><a name="[c2]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_FIFOConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
</UL>

<P><STRONG><a name="[19e]"></a>UART_GetIntId</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_GetIntId))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>UART_GetLineStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.UART_GetLineStatus))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>UART_Init</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, lpc177x_8x_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_Init &rArr; uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
</UL>

<P><STRONG><a name="[c4]"></a>UART_TxCmd</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lpc177x_8x_uart.o(i.UART_TxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardWare_UARTInit
</UL>

<P><STRONG><a name="[10f]"></a>UDP_TX_DATA</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, i_udp.o(i.UDP_TX_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = UDP_TX_DATA &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_Recive_UDP
</UL>

<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lpc177x_8x_usbhost.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>USB_disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, usbdisk.o(i.USB_disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USB_disk_initialize &rArr; MS_Init &rArr; MS_ReadCapacity &rArr; Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_GetDeviceType
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[1a7]"></a>USB_disk_read</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbdisk.o(i.USB_disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USB_disk_read &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1a8]"></a>USB_disk_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbdisk.o(i.USB_disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USB_disk_write &rArr; MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteBE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[11f]"></a>WhirteData24c02Flash_Byte</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, i_eeprom.o(i.WhirteData24c02Flash_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WhirteData24c02Flash_Byte &rArr; I_EEPROM_WR &rArr; I2C_MasterTransferData &rArr; I2C_MasterHanleStates
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_UpdateProgram
</UL>

<P><STRONG><a name="[125]"></a>WhirteData24c02Flash_Long</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, i_eeprom.o(i.WhirteData24c02Flash_Long))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WhirteData24c02Flash_Long &rArr; I_EEPROM_WR &rArr; I2C_MasterTransferData &rArr; I2C_MasterHanleStates
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_EEPROM_WR
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_UserWriteSoftDogNum
</UL>

<P><STRONG><a name="[19d]"></a>WorkRunFile</STRONG> (Thumb, 762 bytes, Stack size 40 bytes, worklib.o(i.WorkRunFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = WorkRunFile &rArr; Work_FCmd_MoveRelZ &rArr; Work_FCmd_MoveRel &rArr; AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RUNNING_LED
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPC_LinkData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIOAlarm
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIsHaveMater
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_SetPreCutTailMode
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_SetPreCutHeadMode
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRelZ
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRelY
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRelX
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRelR
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRelA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDisZ
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDisY
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDisX
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDisR
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDisA
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Rel
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Dis
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveChkDaoWei_Abs
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbsZ
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbsY
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbsX
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbsR
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbsA
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Set_Two
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Set
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Check_Two
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_GPIO_Check
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_DealyTime
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_CheckMonStu
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_CheckDaoWei
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
</UL>

<P><STRONG><a name="[1bc]"></a>Work_FCmd_CheckDaoWei</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, worklib.o(i.Work_FCmd_CheckDaoWei))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Work_FCmd_CheckDaoWei &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1bb]"></a>Work_FCmd_CheckMonStu</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, worklib.o(i.Work_FCmd_CheckMonStu))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Work_FCmd_CheckMonStu &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1ba]"></a>Work_FCmd_DealyTime</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, worklib.o(i.Work_FCmd_DealyTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Work_FCmd_DealyTime &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1b9]"></a>Work_FCmd_GPIO_Check</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, worklib.o(i.Work_FCmd_GPIO_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Work_FCmd_GPIO_Check &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotion
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1be]"></a>Work_FCmd_GPIO_Check_Two</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, worklib.o(i.Work_FCmd_GPIO_Check_Two))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Work_FCmd_GPIO_Check_Two &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGpIn
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotion
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1b8]"></a>Work_FCmd_GPIO_Set</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, worklib.o(i.Work_FCmd_GPIO_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Work_FCmd_GPIO_Set &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpOut
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1bd]"></a>Work_FCmd_GPIO_Set_Two</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, worklib.o(i.Work_FCmd_GPIO_Set_Two))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Work_FCmd_GPIO_Set_Two &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpOut
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1c4]"></a>Work_FCmd_MoveAbs</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, worklib.o(i.Work_FCmd_MoveAbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveAbs &rArr; AxisMove_AbsPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_AbsPos_SpeedBegin_Acc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbsZ
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbsY
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbsX
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbsR
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbsA
</UL>

<P><STRONG><a name="[1a9]"></a>Work_FCmd_MoveAbsA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveAbsA))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveAbsA &rArr; Work_FCmd_MoveAbs &rArr; AxisMove_AbsPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1aa]"></a>Work_FCmd_MoveAbsR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveAbsR))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveAbsR &rArr; Work_FCmd_MoveAbs &rArr; AxisMove_AbsPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1ab]"></a>Work_FCmd_MoveAbsX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveAbsX))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveAbsX &rArr; Work_FCmd_MoveAbs &rArr; AxisMove_AbsPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1ac]"></a>Work_FCmd_MoveAbsY</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveAbsY))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveAbsY &rArr; Work_FCmd_MoveAbs &rArr; AxisMove_AbsPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1ad]"></a>Work_FCmd_MoveAbsZ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveAbsZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveAbsZ &rArr; Work_FCmd_MoveAbs &rArr; AxisMove_AbsPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1bf]"></a>Work_FCmd_MoveChkDaoWei_Abs</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, worklib.o(i.Work_FCmd_MoveChkDaoWei_Abs))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveChkDaoWei_Abs &rArr; AxisMove_AbsPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCmd_CheckDaoWei_Axis
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_AbsPos_SpeedBegin_Acc
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1c1]"></a>Work_FCmd_MoveChkDaoWei_Dis</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, worklib.o(i.Work_FCmd_MoveChkDaoWei_Dis))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveChkDaoWei_Dis &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_Distance_SpeedBegin_Acc
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCmd_CheckDaoWei_Axis
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1c0]"></a>Work_FCmd_MoveChkDaoWei_Rel</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, worklib.o(i.Work_FCmd_MoveChkDaoWei_Rel))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveChkDaoWei_Rel &rArr; AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCmd_CheckDaoWei_Axis
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMotionStu
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_RelPos_SpeedBegin_Acc
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1c5]"></a>Work_FCmd_MoveDis</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, worklib.o(i.Work_FCmd_MoveDis))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveDis &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_Distance_SpeedBegin_Acc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDisZ
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDisY
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDisX
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDisR
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDisA
</UL>

<P><STRONG><a name="[1b2]"></a>Work_FCmd_MoveDisA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveDisA))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveDisA &rArr; Work_FCmd_MoveDis &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDis
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1b1]"></a>Work_FCmd_MoveDisR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveDisR))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveDisR &rArr; Work_FCmd_MoveDis &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDis
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1ae]"></a>Work_FCmd_MoveDisX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveDisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveDisX &rArr; Work_FCmd_MoveDis &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDis
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1af]"></a>Work_FCmd_MoveDisY</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveDisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveDisY &rArr; Work_FCmd_MoveDis &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDis
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1b0]"></a>Work_FCmd_MoveDisZ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveDisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveDisZ &rArr; Work_FCmd_MoveDis &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveDis
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1c6]"></a>Work_FCmd_MoveRel</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, worklib.o(i.Work_FCmd_MoveRel))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveRel &rArr; AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AxisMove_RelPos_SpeedBegin_Acc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRelZ
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRelY
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRelX
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRelR
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRelA
</UL>

<P><STRONG><a name="[1b7]"></a>Work_FCmd_MoveRelA</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveRelA))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveRelA &rArr; Work_FCmd_MoveRel &rArr; AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRel
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1b6]"></a>Work_FCmd_MoveRelR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveRelR))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveRelR &rArr; Work_FCmd_MoveRel &rArr; AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRel
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1b3]"></a>Work_FCmd_MoveRelX</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveRelX))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveRelX &rArr; Work_FCmd_MoveRel &rArr; AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRel
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1b4]"></a>Work_FCmd_MoveRelY</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveRelY))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveRelY &rArr; Work_FCmd_MoveRel &rArr; AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRel
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1b5]"></a>Work_FCmd_MoveRelZ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_MoveRelZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Work_FCmd_MoveRelZ &rArr; Work_FCmd_MoveRel &rArr; AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Work_FCmd_MoveRel
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1c2]"></a>Work_FCmd_SetPreCutHeadMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_SetPreCutHeadMode))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[1c3]"></a>Work_FCmd_SetPreCutTailMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, worklib.o(i.Work_FCmd_SetPreCutTailMode))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WorkRunFile
</UL>

<P><STRONG><a name="[9a]"></a>WriteBE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.WriteBE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[99]"></a>WriteBE32U</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.WriteBE32U))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[d2]"></a>WriteLE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, lpc177x_8x_usbhost.o(i.WriteLE16U))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
</UL>

<P><STRONG><a name="[98]"></a>WriteLE32U</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_usbhost.o(i.WriteLE32U))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[227]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[228]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[229]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ab]"></a>dec_stop</STRONG> (Thumb, 46 bytes, Stack size 80 bytes, motion.o(i.dec_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotion
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_Y
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_X
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_R
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GoHome_A
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMotion
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_Dec_stop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_All_stop_Pmove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_All_stop
</UL>

<P><STRONG><a name="[1c9]"></a>disk_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = disk_initialize &rArr; MMC_disk_initialize &rArr; mci_read_configuration &rArr; MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_initialize
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1ca]"></a>disk_read</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = disk_read &rArr; MMC_Read &rArr; MCI_ReadBlock &rArr; MCI_Cmd_ReadBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_read
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[1e0]"></a>disk_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1cb]"></a>disk_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_disk_write
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[190]"></a>driver_GetSdkMsg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_GetSdkMsg))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[192]"></a>driver_GetSdkRxe</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_GetSdkRxe))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[191]"></a>driver_SDKR_Fifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_SDKR_Fifo))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[18e]"></a>driver_SDKW_Fifo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_SDKW_Fifo))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[193]"></a>driver_SetSdkAck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_SetSdkAck))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[18f]"></a>driver_SetSdkMsg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_SetSdkMsg))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>

<P><STRONG><a name="[f7]"></a>driver_SetSdkRst</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i_extern_bus.o(i.driver_SetSdkRst))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLink
</UL>

<P><STRONG><a name="[3a]"></a>etharp_output</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[1d5]"></a>etharp_query</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[1d6]"></a>etharp_request</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[f1]"></a>etharp_tmr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[35]"></a>ethernet_input</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; ip_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_lwip.o(i.I_LWIP_Init)
</UL>
<P><STRONG><a name="[36]"></a>ethernetif_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ethernetif_init &rArr; I_ENET_Init &rArr; Init_EMAC &rArr; EMAC_Init &rArr; rx_descr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENET_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_lwip.o(i.I_LWIP_Init)
</UL>
<P><STRONG><a name="[ea]"></a>ethernetif_input</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIPStackGetData
</UL>

<P><STRONG><a name="[bc]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[1e1]"></a>icmp_dest_unreach</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1e3]"></a>icmp_input</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1e8]"></a>icmp_time_exceeded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[1e5]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1e4]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[1ea]"></a>inet_chksum_pseudo</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[1d2]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1eb]"></a>ip_frag</STRONG> (Thumb, 362 bytes, Stack size 88 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[1db]"></a>ip_input</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = ip_input &rArr; ip_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[1e7]"></a>ip_output</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[1e6]"></a>ip_output_if</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[1f3]"></a>ip_reass</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = ip_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1f6]"></a>ip_route</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[1ce]"></a>lwip_htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[ec]"></a>lwip_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, init.o(i.lwip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lwip_init &rArr; memp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stats_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[1ec]"></a>lwip_ntohs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = main &rArr; TaskStart &rArr; WorkRunFile &rArr; Work_FCmd_MoveRelZ &rArr; Work_FCmd_MoveRel &rArr; AxisMove_RelPos_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosDev
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetGpOut
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lmt_Disable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkConnect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitLink
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitModbusReg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopMotion
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLmtMode_Default
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_InitLinkPC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RUNNING_LED
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskStart
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAllStu
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPC_LinkData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckIOAlarm
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppJumpToBoot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[14f]"></a>mci_read_configuration</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, diskio.o(i.mci_read_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mci_read_configuration &rArr; MCI_SetBusWidth &rArr; MCI_Acmd_SendBusWidth &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Set_MCIClock
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetCardAddress
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBusWidth
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_SetBlockLen
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardType
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCardAddress
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCSD
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_GetCID
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCI_Cmd_SelectCard
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unstuff_bits
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMC_disk_initialize
</UL>

<P><STRONG><a name="[20a]"></a>mem_free</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[1fd]"></a>mem_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mem.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1dc]"></a>mem_malloc</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[212]"></a>mem_trim</STRONG> (Thumb, 228 bytes, Stack size 36 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[1f1]"></a>memp_free</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memp.o(i.memp_free))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>

<P><STRONG><a name="[1fe]"></a>memp_init</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1ed]"></a>memp_malloc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[ed]"></a>netif_add</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netif_add &rArr; netif_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[1ff]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, netif.o(i.netif_init))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[20d]"></a>netif_set_addr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netif_set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[ee]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[210]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[20e]"></a>netif_set_ipaddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[20f]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[ef]"></a>netif_set_up</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_LWIP_Init
</UL>

<P><STRONG><a name="[1a2]"></a>pbuf_alloc</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_TX_DATA
</UL>

<P><STRONG><a name="[1ee]"></a>pbuf_alloced_custom</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[1ef]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[211]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_chain), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[1f7]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[1d7]"></a>pbuf_copy</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[1a4]"></a>pbuf_free</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_TX_DATA
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_server_rev
</UL>

<P><STRONG><a name="[1d1]"></a>pbuf_header</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[1f2]"></a>pbuf_realloc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[1d8]"></a>pbuf_ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[1f4]"></a>raw_input</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[8a]"></a>rx_descr_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lpc177x_8x_emac.o(i.rx_descr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_descr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[89]"></a>setEmacAddr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc177x_8x_emac.o(i.setEmacAddr))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[1fc]"></a>stats_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stats.o(i.stats_init))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[11d]"></a>sudden_stop</STRONG> (Thumb, 46 bytes, Stack size 80 bytes, motion.o(i.sudden_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sudden_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_Sudden_stop
</UL>

<P><STRONG><a name="[8b]"></a>tx_descr_init</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lpc177x_8x_emac.o(i.tx_descr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_descr_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[f9]"></a>udp_bind</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UDP_Server
</UL>

<P><STRONG><a name="[200]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, udp.o(i.udp_init))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[1f5]"></a>udp_input</STRONG> (Thumb, 410 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[f8]"></a>udp_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_new &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UDP_Server
</UL>

<P><STRONG><a name="[fa]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_UDP_Server
</UL>

<P><STRONG><a name="[1a3]"></a>udp_send</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udp.o(i.udp_send))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UDP_TX_DATA
</UL>

<P><STRONG><a name="[213]"></a>udp_sendto</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, udp.o(i.udp_sendto), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>

<P><STRONG><a name="[214]"></a>udp_sendto_if</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, udp.o(i.udp_sendto_if), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[39]"></a>udp_server_rev</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, i_udp.o(i.udp_server_rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = udp_server_rev &rArr; Link_PC_Recive_UDP &rArr; MyPCLink &rArr; MyPCCommand &rArr; Link_PC_PMove_Mode_SpeedBeiginAcc &rArr; AxisMove_Distance_SpeedBegin_Acc &rArr; AxisMove_SpeedBegin_Acc &rArr; DBSGMoveSetLen_SpeedBegin_Acc &rArr; AxisDBSiGanChangeUpDown &rArr; CheckMotionStu &rArr; DelayMs &rArr; CheckIOAlarm &rArr; CheckSetIO_Low &rArr; StopMotion &rArr; dec_stop &rArr; SendCmd &rArr; AddMsgByte &rArr; CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Link_PC_Recive_UDP
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i_udp.o(i.Init_UDP_Server)
</UL>
<P><STRONG><a name="[209]"></a>unstuff_bits</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, diskio.o(i.unstuff_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = unstuff_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[83]"></a>EMAC_AllocTxBuff</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lpc177x_8x_emac.o(i.EMAC_AllocTxBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EMAC_AllocTxBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetBufferSts
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WritePacketBuffer
</UL>

<P><STRONG><a name="[18d]"></a>PIN_GetPointer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpc177x_8x_pinsel.o(i.PIN_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>

<P><STRONG><a name="[db]"></a>I2C_GetByte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc177x_8x_i2c.o(i.I2C_GetByte))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHanleStates
</UL>

<P><STRONG><a name="[d6]"></a>I2C_GetPointer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc177x_8x_i2c.o(i.I2C_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHanleStates
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>

<P><STRONG><a name="[d9]"></a>I2C_SendByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lpc177x_8x_i2c.o(i.I2C_SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHanleStates
</UL>

<P><STRONG><a name="[dd]"></a>I2C_Start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc177x_8x_i2c.o(i.I2C_Start))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>

<P><STRONG><a name="[da]"></a>I2C_Stop</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc177x_8x_i2c.o(i.I2C_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterHanleStates
</UL>

<P><STRONG><a name="[1a0]"></a>uart_get_pointer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lpc177x_8x_uart.o(i.uart_get_pointer))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_divisors
</UL>

<P><STRONG><a name="[1a1]"></a>uart_set_divisors</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, lpc177x_8x_uart.o(i.uart_set_divisors))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_set_divisors &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_get_pointer
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_GetPointer</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lpc177x_8x_gpio.o(i.GPIO_GetPointer))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>

<P><STRONG><a name="[208]"></a>swap_buff</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, diskio.o(i.swap_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = swap_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mci_read_configuration
</UL>

<P><STRONG><a name="[1c7]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1df]"></a>find_volume</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[1de]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[1c8]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[20c]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sync_window &rArr; disk_write &rArr; MMC_Write &rArr; MCI_WriteBlock &rArr; MCI_Cmd_WriteBlock &rArr; MCI_CheckStatus &rArr; MCI_GetCardStatus &rArr; MCI_CmdResp &rArr; MCI_SendCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[20b]"></a>plug_holes</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[1e2]"></a>icmp_send_response</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[1e9]"></a>lwip_standard_chksum</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[1f0]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[1f9]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[1fa]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_reass_dequeue_datagram
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[1fb]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[1f8]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[3c]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[1cc]"></a>etharp_arp_input</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = etharp_arp_input &rArr; etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[1cf]"></a>etharp_find_entry</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[1d0]"></a>etharp_free_entry</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[1d4]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[1d9]"></a>etharp_raw</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[1d3]"></a>etharp_send_ip</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[1cd]"></a>etharp_update_arp_entry</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[1dd]"></a>low_level_input</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENetGetReadbuff
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENETGetReadLength
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENETClearCount
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[3b]"></a>low_level_output</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = low_level_output &rArr; I_ENETSendData &rArr; EMAC_WritePacketBuffer &rArr; EMAC_AllocTxBuff
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENETSendData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[df]"></a>I_EEPROM_RD</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, i_eeprom.o(i.I_EEPROM_RD))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I_EEPROM_RD &rArr; I2C_MasterTransferData &rArr; I2C_MasterHanleStates
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData24c02Flash_Bytes
</UL>

<P><STRONG><a name="[e0]"></a>I_EEPROM_WR</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, i_eeprom.o(i.I_EEPROM_WR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I_EEPROM_WR &rArr; I2C_MasterTransferData &rArr; I2C_MasterHanleStates
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransferData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhirteData24c02Flash_Long
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WhirteData24c02Flash_Byte
</UL>

<P><STRONG><a name="[e7]"></a>Init_EMAC</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, i_enet.o(i.Init_EMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Init_EMAC &rArr; EMAC_Init &rArr; rx_descr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_ENET_Init
</UL>

<P><STRONG><a name="[e9]"></a>Main_GPIO_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, i_gpio.o(i.Main_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Main_GPIO_Init &rArr; PINSEL_ConfigPin
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_GPIO_Init
</UL>

<P><STRONG><a name="[f2]"></a>SDRAMInit</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, i_sdram.o(i.SDRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I_SDRAMInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
